function [x,w,we,indi,ie]=GL(n,a,expoc,es,me)
% Gauss-Laguerre quadrature
% Copyright 2025 A. Gil, J. Segura, N. M. Temme
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% WARNING: The default working mode of the algorithm (es=0) corresponds to
% the weight function w(x)=x^a exp(-x)/gamma(a+1). For the more standard 
% weight function w(x)=x^a exp(-x) choose es=1 as input (see below).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INPUTS:
%--------------------
% n: degree
% a: alpha
% expoc: exponential cutoff. The algorithm computes only those 
%        weights w such that, approximately, w/max(w)<10^(-expoc) 
%
% me: mode of computation
%     me=0 (or third input omitted): combined method
%     me=1:                          only iterative
%     me=2:                          only GW
%     me=3:                          only asymptotics (n>150)
%
% es: extra scaling
%     es=0 (or fourth input omitted): the weights w are the Gauss-Laguerre
%                                     weights divided by gamma(a+1)
%     es=1: standard Gauss-Laguerre weights
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% OUTPUTS
%---------------------
%x:    nodes
%w:    weights
%we:   scaled weights
%indi: index for the pivotal node used in scaling (see article, section 3.1)
%ie:   error flag
%                ie=0: succesful computation
%                ie=1: parameters out of range. No outputs provided.
%                ie=2: some weights underflow and are set to zero
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
x=[];w=[];we=[];indi=0;ie=0;
if nargin<3
   expoc=1.e300;
end
if nargin<4
   es=0; 
end
if nargin<5
   me=0;
end  
if(es~=0)&&(es~=1)
    disp('Error: the third input should be either 0 or 1');
    return;
end
if(fix(me)~=me)&&(abs(me-1.5)>1.5)
    disp('Error: the forth input should be either 0 or 1');
    return;
end   
if me<1
% COMBINED METHOD    
   if n<5
      [x,w]=LGW(n,a);
      we=[];
      indi=0;
      % Golub-Welsch
   elseif ((n<=275)&&(a>(3*n-4140)/3900))||((n>275)&&(n<=400)&&(a>1.5))||((n>400)&&(n<=800)&&(a>3.5))||((n>800)&&(a>5))
      [x,w,we,indi]=iterGL(n,a,expoc);
      % Iterative method     
   else
      [x,w,we,indi]=asympGL(n,a,expoc);
      % Asymptotic method      
   end   
elseif me==1
   [x,w,we,indi]=iterGL(n,a,expoc);
   %Iterative-only method
elseif me==2    
   [x,w]=LGW(n,a);
   we=[];
   indi=0;
   %Golub-Welsch (me=2) 
else
   if n>100
     [x,w,we,indi]=asympGL(n,a,expoc);
   % Asymptotic method
   else
     disp('Degree too small for asymptotics');
     return;
   end  
end  

if es==1
   w=gamma(a+1)*w;
   we=gamma(a+1)*we;
end

if ~isempty(x)
   maw=max(we);
   if ~isfinite(maw)||maw==0
      disp('Error. Degree or parameters out of range');
      x=[];w=[];
      ie=1;
      return
   elseif min(w)==0
      disp('Warning: some weights are too small and have been set to zero')
      ie=2;
   end
else
   disp('Error. Degree or parameters out of range');
   ie=1;
end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%% Iterative method
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [xc,wn,we,indi]=iterGL(n,alpha,expoc)
if nargin<3
  expoc=1.e300;
end
expoc=max(20,expoc);
fcut=2.3*expoc;
xc=zeros(1,n);we=zeros(1,n);wn=zeros(1,n);expi=zeros(1,n);
xr=(2*n^2+n*(alpha-1)+2*(alpha+1)+2*(n-1)*sqrt(n^2+(n+2)*(alpha+1)))/(n+2);
prod=(alpha+1)/(n+2)*(n*(alpha+5)+2*(alpha-1));
xl=prod/xr;
zl=sqrt(xl);
zr=sqrt(xr);
if abs(alpha)>0.5  
    x=sqrt(alpha^2-0.25);
else
    x=xl;
end
paso=0;
xini=x;
z=sqrt(x);
L=2*n+alpha+1;
hph=start(n,alpha,x);
f0=1/hph;f1=1;
hf=1/hph;
w=sqrt((0.25-alpha^2+2*L*z^2-z^4)/z^2);
h=-atan(w*hf)/w;
if h<0
   h=h+pi/w;
end
z0=z;
z=z+h;
ij=n;
i=0;
j=-3;
errom=1.0e-12;
expis=0;
expi(1)=expis;
while j<0
   j=j+2;
   while z<zr && z>zl && abs(expis)<fcut
      i=i+1;
      err=1;
      while err>errom && z<zr && z>zl && abs(expis)<fcut
      if (j<0 && i>2)||j>0
         [y,yd]=sertay(n,alpha,z0,h,f0,f1);        
         f0=y;f1=yd;
         hf=y/yd;
      else
         hph=start(n,alpha,z^2);
         hf=1/hph;
         f0=1/hph;f1=1;
      end
         w2=(0.25-alpha^2+2*L*z^2-z^4)/z^2;
         if w2>0
            w=sqrt(w2);
            h=-atan(w*hf)/w;
         else
            w=sqrt(-w2);
            h=-atanh(w*hf)/w;
         end
         %if i==n+1
         %  disp(h)
         %  pause
         %end
         z0=z;
         z=z+h;
         err=abs(h/z);
      end
      if err<errom && z<zr && z>zl
        xc(i)=z^2;
        if i>1
           expis=(alpha+0.5)*log(xc(i)/xc(1))+xc(1)-xc(i);
           expi(i)=expis;
        end   
        [~,yd]=sertay(n,alpha,z0,h,f0,f1);
        we(i)=1/yd^2;
        f0=0;
        f1=yd;
      else
        i=i-1;
      end
      w2=(0.25-alpha^2+2*L*z^2-z^4)/z^2;
         if w2>0
            z0=z;
            w=sqrt(w2);
            h=-j*pi/w;
            z=z+h;
         else
            z=0;
         end
   end
   z0=sqrt(xc(3));h=sqrt(xc(2))-sqrt(xc(3));
   f0=0;f1=1/sqrt(we(3));
   [~,yd]=sertay(n,alpha,z0,h,f0,f1);
   we(2)=1/yd^2;
   z0=sqrt(xc(2));h=sqrt(xc(1))-sqrt(xc(2));
   f0=0;f1=yd;
   [~,yd]=sertay(n,alpha,z0,h,f0,f1);
   we(1)=1/yd^2;
   f0=0;f1=yd;
   if j<0 && paso<1
      paso=1;
      expis=0;
      ij=i;
      x=xini;z=sqrt(x);
      z0=sqrt(xc(1));h=z-z0;
      [y,yd]=sertay(n,alpha,z0,h,f0,f1);
      f0=y;f1=yd;
      hf=y/yd;
      w2=(0.25-alpha^2+2*L*z^2-z^4)/z^2;
      w=sqrt(w2);
      h=-atan(w*hf)/w;
      if h>0
         h=h-pi/w;
      end
      z0=z;
      z=z+h;
   end
end
sumw=0;
for k=1:ij
  wn(k)=we(k)*exp(expi(k));
  sumw=sumw+wn(k);
end
for k=ij+1:i
  wn(k)=we(k)*exp(expi(k));
  sumw=sumw+wn(k);
end
xc=[xc(i:-1:ij+1),xc(1:ij)];
we=[we(i:-1:ij+1),we(1:ij)]/sumw;
wn=[wn(i:-1:ij+1),wn(1:ij)]/sumw;
indi=i-ij+1;

end

function hph=start(n,alpha,x)

if (n<10)
    hph=recstart(n,alpha,x);
else
    hph=cfstart(n,alpha,x);
end    
end   

function hph=recstart(n,alpha,x)
% output: dot(y)/y for the change z=sqrt(x)
% and starting at x=sqrt(alpha^2-1/4)
%x=sqrt(alpha^2-1/4);
r=alpha+1-x;
for i=1:n-1
  r=((2*i+alpha+1-x)-(i+alpha)/r)/(i+1);
end
z=sqrt(x);
if abs(r)>1.e-200
  hph=(alpha+0.5)/z-z+2/z*(n-(n+alpha)/r);
else
  hph=1.e+200;
end
end

function [hph,iter]=cfstart(n,alpha,x)
%x=sqrt(alpha^2-0.25);
alphai=alpha+1;
bp=-(1+alpha/x);
ap=-(alpha+n)/x;
b=-(1+alphai/x);
a=-(alphai+n)/x;
E=b;F=b+a/bp;cf=ap/(bp+a/b);
del=abs(E/F-1);
while del>5.0e-16
  alphai=alphai+1;
  b=-(1+alphai/x);
  a=-(alphai+n)/x;
  E=b+a/E;
  F=b+a/F;
  R=E/F;
  del=abs(R-1);
  cf=cf*R;
end
iter=alphai-alpha;
z=sqrt(x);
hph=(alpha+0.5)/z-z+2/z*(-alpha+(alpha+n)/cf);
end

function [y,yd]=sertay(n,alpha,z0,h,f0,f1)
% input: n,alpha
% input: z0,h=z-z0
% input: f0, f1 (function and derivative at z0)
% output: y, yd (function and derivative at z)
f0=f0*1.e-280;
f1=f1*1.e-280;
L=2*n+alpha+1;
qv=0.25-alpha^2+2*L*z0^2-z0^4;
qv1=4*z0*(L-z0^2);qv2=4*(L-3*z0^2);qv3=-24*z0;qv4=-24;
pv=z0^2;pv1=2*z0;pv2=2;
fm1=0;fm2=0;fm3=0;fm4=0;
coe=1;sd=f1;coe=coe*h;sf=f0+coe*f1;
error=1;
j=0;
while error>1.0e-25 || j<10
   c0=j;c1=c0*(j-1)/2;c2=c1*(j-2)/3;c3=c2*(j-3)/4;
   f2=-1/pv*(c0*pv1*f1+(c1*pv2+qv)*f0+c0*qv1*fm1+c1*qv2*fm2+c2*qv3*fm3+c3*qv4*fm4);
%   sd1=sd;sf1=sf;
   ad2=coe*f2;
   sd=sd+ad2;coe=coe*h/(j+2);sf=sf+coe*f2;
%   error=max(abs(sd/sd1-1),abs(sf/sf1-1));
   error=abs(ad2/sd);
   fm4=fm3;fm3=fm2;fm2=fm1;fm1=f0;f0=f1;f1=f2;
   j=j+1;
end
%y=sf;
%yd=sd;
y=sf*1.e280;
yd=sd*1.e280;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Asymptotic method
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [xcn,wn,ws,inde]=asympGL(n,alpha,expoc)
%-------------------------------------------------------------
%Computation of the nodes and weights of 
%the Gauss-Laguerre quadrature using asymptotic methods.
%This function is to be used for n large. 
%-------------------------------------------------------------
if nargin<3
  expoc=1.e300;
end
expoc=max(20,expoc);
NN=0.8*n;
nbess=floor(NN);
%Nodes & weights 
[xcni,wasi]=nodesAsympWGL(alpha,n,nbess);
%Significant nodes & weigths
[xcn,ws,wn,inde]=weightsAsympGL(alpha,n,xcni,wasi,expoc);
end
function [xcn,wasy]=nodesAsympWGL(alpha,n,nbess)
%--------------------------------------------------------------------
% Computation of the nodes of the Gauss-Laguerre quadrature
% using asymptotic expansions. 
% The function combines the use of a Bessel and an Airy expansion.
% NN is used to fix the number of nodes and weights using the Bessel
% expansion.
%--------------------------------------------------------------------
nairy=n-nbess;
[xcn1,wasy1]=besselNodesWGL(alpha,n,nbess);
[xcn2,wasy2]=airyNodesWGL(alpha,n,nairy);
xcn(1:nbess)=xcn1(1:nbess);
xcn(nbess+1:n)=xcn2(1:nairy);
wasy(1:nbess)=wasy1(1:nbess);
wasy(nbess+1:n)=wasy2(1:nairy);
end
function [xcnf,ws,wn,inde]=weightsAsympGL(a,n,xcn,was,expoc)
%-------------------------------------------------------
% Calculation of the weights for the Gauss-Laguerre
% quadrature using an asymptotic expansion in terms
% of Bessel functions and another one in terms of
% Airy functions
% Outputs:
% ws: scaled normalized weights
% wn: standard weights
%-------------------------------------------------------
fcut=2.3*expoc;
k=0;
for i=1:n
  x=xcn(i);  
  expa=was(i);
% Weights without the gamma factors
  wg(i)=1.0/(expa*expa);
end
%---------------------------------------------------------
% Normalization for the weights:
% We use   
%  I=integral(0,infty) x**(a+0.5)*exp(-x)= Gamma(1+alpha)
%  sum w=I
% -------------------------------------------------------
%sumaws=wg(1);
%wn(1)=wg(1);
xco=startnode(n,a);
[~,im]=min(abs(xcn-xco));
inde=im(1);
xco=xcn(inde);
% For alpha<0.5 we use normalization to xcn(1)
sumaws=0;
k=1;
ist=0;
xcnf(1)=xcn(1);
while k<=n && ist==0
  expi=(a+0.5)*log(xcn(k)/xco)+xco-xcn(k);
  if abs(expi)<fcut
    wn(k)=wg(k)*exp(expi);
    sumaws=sumaws+wn(k);
    xcnf(k)=xcn(k);
    wgf(k)=wg(k);
    k=k+1;
  else
    wn(k)=wg(k)*exp(expi);
    sumaws=sumaws+wn(k);
    xcnf(k)=xcn(k);
    wgf(k)=wg(k);
    ist=1;  
  end  
end    
ws=wgf/sumaws;
wn=wn/sumaws;    
end

function [xct1,was1]=besselNodesWGL(alpha,n,ncomp)
%--------------------------------------------------------
%Computation of nodes and derivatives (for the weights) 
%of Gauss-Laguerre quadrature
%using the asymptotic expansion in terms of 
%Bessel functions.
%--------------------------------------------------------
xk=[1.0,.3333333333333333333333333333333333333333,...
         .2444444444444444444444444444444444444444,...
         .2317460317460317460317460317460317460317,...
         .2502998236331569664902998236331569664903,...
         .2926257281812837368392923948479504035060,...
         .3608426376680344934313188281442249696218,...
         .4623584403055302526201997101468000938900,...
         .6098169216954706459150211959977841639148,...
         .8226793797334062302947842868814506332411,...
        1.130152422756563098584089940838992478866,...
        1.575813620350932318206706927341745364582,...
        2.224690874131442544929077337048987723398,...
        3.174022976331710273665866441794634364772,...
        4.569607018974728443650393290818920359391,...
        6.630664728001450576742326631612148064158,...
        9.687733656433721741926290545204269627191,...
        14.24051288661232798397832347696230628325,...
        21.04633327230445883084174888793493166448,...
        31.25570317113156350674046766577702445998,...
        46.62032665475453955099090258815060513543,...
        69.81285148993704650525932822516098250516,...
        104.9191020201402234261237834848962492755,...
        158.1969311099157483898957470486849714023,...
        239.2477040798688216941471695533372157733,...
        362.8271369135700098349592264204000951492,...
        551.6478889723414226048875955250665059561,...
        840.7221854527326646210341927772747841021,...
        1284.098284885838041641189985555305700751,...
        1965.321599983868157264914726380032647198,...
        3013.696521174730661129677482066059018548,...
        4629.590216007937668058966027592824765742,...
        7123.842890797261690853168596619296251158,...
        10979.20375891635230921486468485664705847,...
        16946.18490768922629320729067683346105150,...
        26192.73820004401622488515337816443099919,...
        40538.16253411069980443612752642764166229,...
        62818.91989131761328668376601255327661625,...
        97461.16641782484229012893856889711513367,...
        151377.4386047361186512608291406744346179,...
        235371.9740633210894532548182705462545382,...
        366344.6179030450879976857362878340622478,...
        570749.2860783974954109285144478730404460,...
        890024.4149462284514890018298592189301638,...
        1389124.781030712354842177431593429752011,...
        2169933.453983448882456324584256934252739,...
        3392356.744076378803964568606666060295552,...
        5307520.754544152435038164887156189159127,...
        8310038.437124458332721645050107732294972,...
        13020343.05504389637963304280682163759808,...
        20414445.28571528575624433094590613874754,...
        32028523.85150117584076353628931651528527,...
        50281651.49513660244190796760192273255796,...
        78985090.31719195983024704588158286856222,...
        124146349.7450902028905626211387726383110,...
        195239121.3768089374083522089755502852970,...
        307209813.8437819526610555580466246223440,...
        483649151.0641672821588434782436267283022,...
        761807173.3013457799610309531571517912003,...
        1200525931.065674909664108686902318699628,...
        1892791769.541362805284722363057398244653,...
        2985604192.375137176801700531669672106620,...
        4711436492.586305286372240502129648336122,...
        7438067035.301738958729466438089127944494,...
        11747533089.52431499064839291364406548537,...
        18561265388.09411376265549147645255430426,...
        29338474021.47301870940659811502192822725,...
        46390756929.88306220307068142202199310229,...
        73381160210.86220729027523609113284423742];
  a=alpha;
  a2=a*a;
  a4=a2*a2;
  a6=a4*a2;
  a8=a6*a2;
  a10=a8*a2;
  %McMahon Asymptotic Expansions for Large Zeros
  mu=4.0*a2;
  mu2=mu*mu;
  mu3=mu2*mu;
  cmac1=(1.0-mu)/8.0;
  cmac2=-4.0*(mu-1.0)*(7.0*mu-31.0)/1536.0;
  cmac3=-32.0*(mu-1.0)*(83.0*mu2-982.0*mu+3779.0)...
       /491520.0;
  cmac4=-64.0*(mu-1.0)*(6949.0*mu3-153855.0*mu2+...
         1585743.0*mu-6277237.0)/220200960.0;      
  nu=2.0*n+a+1.0;
  nu2=nu*nu;
  nu4=nu2*nu2;
  nu6=nu4*nu2;
  dn=1.0/(4.0*nu2);
  %Calculation of approximatelly the first 40+10*a zeros of the Bessel function J_a(z)
  bb=(40+10.5*a-0.25)*pi;
  [jk,num,~]=besjz(1e-10,bb,a); 
  iorder=0;   
  if (jk(num)<jk(num-1))
    iorder=1;
  end
  for i=1:ncomp 
    if (i>num) 
      am=(i+0.5*a-0.25)*pi;
      ami=1.0/am;
      ami2=ami*ami;
      ami3=ami*ami2;
      ami5=ami2*ami3;
      ami7=ami5*ami2;
      j1= am+cmac1*ami+cmac2*ami3+cmac3*ami5+cmac4*ami7;
    else
      if (iorder==0) 
        j1=jk(i);
      else
        j1=jk(num-i+1);
      end
    end
    zetak(1)=j1*j1*dn;
    zeta0=zetak(1);
    jzer=j1;
    zeta=zetak(1);
    zetakk=zeta;
    t=1.0;
    k=1;
    x=zeta;
    while ((abs(t)>1.0e-18)&&(k < 69))
      k=k+1;
      zetakk=zeta*zetakk;
      t=xk(k)*zetakk;
      x=x+t;
    end
    % First approximation to the zero
    x0=x;
    xx=x0;
    if xx<1e-3
      zk1(1)= (1/6)*(-1+a2);
      zk1(2)= (1/60)*(-9+a2);
      zk1(3)= (1/315)*(-55+3*a2);
      zk1(4)= (2/315)*(-31+a2);
      zk1(5)= (16/3465)*(-47+a2);
      zk1(6)= (32/27027)*(-199+3*a2);
      zk1(7)= (128/45045)*(-89+a2);
      zk1(8)= (256/109395)*(-115+a2);
      zk1(9)= (4096/6235515)*(-433+3*a2);
      zk1(10)= (8192/4849845)*(-177+a2);
      zk1(11)= (32768/22309287)*(-213+a2);
      zk1(12)= (65536/152108775)*(-757+3*a2);
      zk1(13)= (524288/456326325)*(a2-295);
      zk1(14)= (1048576/1017958725)*(a2-341);
      zk1(15)= (4194304/13524308775)*(3*a2-1171);
      zk1(16)= (8388608/9917826435)*(a2-443);
      zk1(17)= (268435456/347123925225)*(a2-499);
      zk1(18)= (536870912/2266515041175)*(3*a2-1675);
      zk1(19)= (2147483648/3273855059475)*(a2-621);
      zk1(20)= (4294967296/7064634602025)*(a2-687);
      zk1(21)= (34359738368/182267572732245)*(3*a2-2269);
      zk1(22)= (68719476736/130191123380175)*(a2-829);
      zk1(23)= (274877906944/556271163533475)*(a2-905);
      zk1(24)= (549755813888/3555298306061775)*(3*a2-2953);
      zk2(1)= (1/360)*(47-70*a2+23*a4);
      zk2(2)= (4/567)*(68-37*a2+5*a4);
      zk2(3)= (1/680400)*(-285142*a2+22187*a4+885611);
      zk2(4)= (1/2494800)*(-1548106*a2+78357*a4+7039477);
      zk2(5)= (1/15324309000)*(-13238460382*a2+471872855*a4+...
             81298566983);
      zk2(6)= (17/45972927000)*(-3106086170*a2+82347973*a4+...
             24457334677);
      zk2(7)= (1/7815397590000)*(-11522478335294*a2+236429407183*a4+...
             112178140751023);
      zk2(8)= (1/9355030915230000)*(-17222431748936458*a2+...
             281889561733877*a4+201806317294530005);
      zk2(9)=(2/96473756313309375)*(-108456532581390665*a2+...
             1450018026500686*a4+1498154287856781139);
      zk2(10)=(1/1775117116164892500)*(-4786688624430916166*a2+...
             53284796499482599*a4+76669319904865531615);
      zk2(11)=(1/145382091813904695750000)*(-463086964333650204176378*a2+...
             4360541733029941366957*a4+8485660961716094100302605);
      zk2(12)=(1/436146275441714087250000)*(-1620126715436298397004642*a2+...
             13076564848352958972865*a4+33585114683426867920628833);
      zk2(13)=(1/10540201656508090441875000)*(-45159390956306831170759134*a2+...
             315982047664257498596039*a4+1049092167086618977789809367);
      zk2(14)=(1/679305456560289920888401875000)*(-3325072767479737573567197168934*a2+...
             20366302403210370624401988203*a4+85865377739300536497036299459963);
      zk2(15)=(1/346445782845747859653084956250000)*(-1921237986819399984336694045133306*a2+...
             10388954319706208798999612941645*a4+54765130329429452280919030767874669);
      zk2(16)=(1/346445782845747859653084956250000)*(-2160683224356322854053469392232470*a2+...
            10392010840027506985633713254491*a4+67570406836887719434646190797443579);
      zk2(17)=(1/249335730742399063037851543944539062500)*...
           (-1737426579319755959228389081743623281538*a2+...
            7481740349051096288495182045307750101*a4+59287704493479465011250234586827436825261);
      zk2(18)=(1/374003596113598594556777315916808593750)*...
             (-2894809147493686549691590198160768259502*a2+...
            11227035939700515435914748130482753653*a4+107270986670604021563272551164507600178905);
      zk2(19)= (1/6747024873889318645804262779139227031250000)*...
            (-57701846595235681719915649280322030958919510*a2+...
            202620852576260525098330424757364882519483*a4+...
            2311997342118348514613480792252644005249880027);
      zk2(20)=(1/3655538076673232842296749573737633205531250000)*...
            (-34378860880401747227696240015578968119620258522*a2+...
            109827849503292045148908679900195077494009981*a4+...
            1483686315493410888174552984896953546725213186077);
      zk3(1)= (1/45360)*(19887*a2-9303*a4+1493*a6-12077);
      zk3(2)= (1/129600)*(178323*a2-42243*a4+3857*a6-278177);
      zk3(3)= (1/359251200)*(1469900213*a2-226511290*a4+13613082*a6-...
           3812781585-1925*a8+385*a10);
      zk3(4)=(1/980755776000)*(9927020190805*a2-1099325083034*a4+...
           46800898954*a6-37014573853657-10335325*a8+1226225*a10);
      zk3(5)=(1/2942267328000)*(64287858424979*a2-5443973594470*a4-...
           46361315*a8+173293172550*a6+3458455*a10-318326921548071);
      zk3(6)=(1/1500556337280000)*(63919618862488891*a2-...
           4317239563168838*a4-31504508035*a8+106934131698486*a6+...
           1563777215*a10-399844322598060135);
      zk3(7)=(1/2394887914298880000)*(183878519220663372599*a2-...
           10212452136970475950*a4-62753653579799*a8+202870947846585070*a6+...
           2177543340427*a10-1403900793222746738155);
      zk3(8)=(1/3951565058593152000000)*(513942808855682995077811*a2-...
           24020276830048360594550*a4-123853231207285195*a8+...
           391849128654392971398*a6+3131792641633271*a10-4669656715426323848052975);
      zk3(9)=(1/22721499086910624000000)*(4760335075440334710237983*a2-...
           190653050576231859286590*a4-826857765381790175*a8+...
           2603036788743200863934*a6+15771587521949523*a10-50483210614531032383800595);
      zk3(10)=(1/372178155043596021120000000)*...
           (120492183302604125384611265691*a2-...
           4196264614702431598452406950*a4-15384148568883304204995*a8+...
           48703395871050678930850838*a6+227804919129481044351*a10-...
           1468682120647000721733732146375);
      zk3(11)= (1/4652226938044950264000000)*...
          (2247602166216607355616038717*a2-...
          68890394792994878817941896*a4-214798687404352753442*a8+...
          688599430701711594047606*a6+2529392656047278437*a10-...
          31096714232628368450194901102);
      zk3(12)=(1/48569249233189280756160000000)*...
          (33990922269676541480749417382885*a2-...
          926255645628929570392603150762*a4-2472051486763151407619765*a8+...
          8062053454584382742984918922*a6+23623836628963135686433*a10-...
          528290906450149277501572347882033);
      zk3(13)=(1/43475549219858554936857720000000)*...
          (42960180970900973523693785141295193*a2-...
          1049790322448520158270896886720570*a4-...
          2413600701532475323655873845*a8+...
          8032407774471897073950345457186*a6+...
          19044209418233722069031861*a10-743503392374506004492848122518172865);
      zk3(14)=(1/88690120408511452071189748800000000)*...
          (121012602606997127279628292289782326247*a2-...
          2671521978473584594727632252325424638*a4-...
          5324153725228840651568469973615*a8+...
          18118087585578722452863935397442734*a6+...
          35203337044181844811579910747*a10-...
          2314694294267549855722633851266449996419);
      x0kk=1;
      sum1=0;
      sum2=0;
      sum3=0;
      for kj=1:24
        x0kk=xx*x0kk;
        t1=zk1(kj)*x0kk;
        if kj<=14
          t3=zk3(kj)*x0kk;
          sum3=sum3+t3;
        end
        if kj<=20
          t2=zk2(kj)*x0kk;
          sum2=sum2+t2;
        end  
        sum1=sum1+t1;
      end  
      zetak(2)=sum1;
      zetak(3)=sum2;
      zetak(4)=sum3;
    else
      b=sqrt(zetak(1));
      b2=b*b;
      b3=b2*b;
      b4=b3*b;
      b5=b4*b;
      xi=sqrt(x0/(1.0-x0));
      xi2=xi*xi;
      xi3=xi2*xi;
      xi4=xi3*xi;
      xi5=xi4*xi;
      xi6=xi5*xi;
      xi7=xi6*xi;
      xi8=xi7*xi;
      xi9=xi8*xi;
      xi10=xi9*xi;
      xi11=xi10*xi;
      xi12=xi10*xi2;
      xi13=xi12*xi;
      xi14=xi13*xi;
      xi15=xi14*xi;
      xi16=xi15*xi;
      xi17=xi16*xi;
      xi18=xi17*xi;
      xi20=xi18*xi2;
      zetak(2)=-0.208333333333333333333333333333e-1*(3.0*xi-3.0*b+12.0*b*a2...
             -12.0*xi*a2+5*xi4*b+6.0*xi2*b)/xi;
      zetak(3)=-0.217013888888888888888888888889e-4*(1680.0*b3*a4-2280.0*b3*a2...
             +90.0*b*xi2-180.0*b*xi4-6275.0*b3*xi12-30201.0*b3*xi8...
             -150.0*b*xi6-22590.0*b3*xi10-575.0*b2*xi9...
             -1380.0*b2*xi7-930.0*b2*xi5-135.0*b2*xi+465.0*b3...
             +600.0*b3*xi8*a2+720.0*b3*xi4*a4+1920.0*xi3*a2-960.0*xi3*a4...
             +4320.0*b2*xi7*a2-1440.0*b2*xi5*a4+1080.0*b2*xi*a2+...
             1800.0*b2*xi9*a2+3360.0*b2*xi5*a2-2160.0*b2*xi*a4...
             +600.0*b*xi6*a2+1440.0*b*xi2*a4+720.0*b*xi4*a2...
             -720.0*b*xi2*a2+1440.0*xi3*b2*a2-2880.0*xi3*b2*a4...
             +1170.0*b3*xi2-4245.0*b3*xi4-17940.0*b3*xi6-420.0*xi3...
             +1920.0*b3*xi6*a2+4320.0*b3*xi2*a4+1680.0*b3*xi4*a2...
             -5760.0*b3*xi2*a2-180.0*xi3*b2)/(b2*xi3);
      zetak(4)=-0.467212579074196551048402900255e-11*(3628800.0*b5*xi4*a8+...
             11427091200.0*b5*xi4*a6...
             -4354560.0*b*xi6*a6-48140054928.0*b5*xi12*a2+26127360.0*b3*xi4*a8...
             -1650378240.0*b3*xi8*a6-3628800.0*b*xi8*a6-10886400.0*b*xi4*a8...
             +2658458880.0*b3*xi2*a6+5826401280.0*b3*xi4*a6+1426662720.0*b3*xi6*a4...
             -21772800.0*b3*xi2*a8+15326690400.0*b3*xi10*a4-26994067128.0*b3*xi10*a2...
             -14515200.0*b4*xi5*a8-14515200.0*b2*xi7*a8-157392476640.0*b4*xi15*a2...
             -17418240.0*b2*xi5*a8-7257600.0*b2*xi9*a6-1741824.0*xi5*a10...
             -986307840.0*b2*xi3*a6+3760162560.0*b2*xi7*a4+17418240.0*b3*xi2*a10...
             +8709120.0*b*xi4*a10+11291555520.0*b3*xi12*a4+4354560.0*b*xi6*a8...
             +3628800.0*b*xi8*a8+21772800.0*b3*xi6*a8+3136543200.0*b3*xi14*a4...
             -827003520.0*b3*xi10*a6+9740062080.0*b3*xi8*a4+1245404160.0*b3*xi6*a6...
             -20329354080.0*b3*xi12*a2-5647042800.0*b3*xi14*a2+71305920.0*b*xi6*a4...
             +59421600.0*b*xi8*a4-377622000.0*b*xi8*a2+144789120.0*b*xi4*a6...
             -941945760.0*b*xi4*a4-21039973920.0*b5*xi14*a2-3788204700.0*b5*xi16*a2...
             +492246720.0*b5*xi10*a4-59566189536.0*b5*xi10*a2-172922400.0*b5*xi12*a4...
             +4079043360.0*b5*xi8*a4-136321920.0*b5*xi8*a6+1679408640.0*b5*xi6*a6...
             +3480382080.0*b5*xi6*a4+4354560.0*b5*xi2*a8+8356400640.0*b5*xi2*a6...
             -32790099300.0*b4*xi17*a2-3024000.0*b2*xi11*a6+1739304000.0*b4*xi13*a4...
             -8709120.0*b4*xi*a10-17418240.0*b2*xi3*a10+408965760.0*b4*xi9*a6...
             +6818878080.0*b4*xi11*a4-1693923840.0*b4*xi7*a6-17418240.0*b4*xi3*a8...
             +2931707520.0*b2*xi9*a4+21772800.0*b2*xi3*a8-965260800.0*b2*xi7*a6...
             -1933424640.0*b2*xi5*a6+1221544800.0*b2*xi11*a4+2177280.0*xi5*a8...
             +6700579200.0*b4*xi7*a4-7941265920.0*b4*xi5*a6-1655299800.0*b2*xi11*a2...
             -287636287680.0*b4*xi11*a2+8774710560.0*b4*xi9*a4-224042112.0*xi5*a6...
             -3907128960.0*b4*xi*a6+10886400.0*b4*xi*a8-10851563520.0*b4*xi3*a6...
             -301025934720.0*b4*xi13*a2+1215726750.0*b3*xi14+2314230912.0*b5*a6...
             -2177280.0*b5*a8+1741824.0*b5*a10+337525650.0*b2*xi11+84430740744.0*b4*xi11...
             +46634749560.0*b4*xi15+9715572825.0*b4*xi17+88975682460.0*b4*xi13+...
             90734175.0*b*xi8+2996958673695.0*b5*xi16+4125729676824.0*b5*xi14...
             +1184767043250.0*b5*xi18+197461173875.0*b5*xi20+3344574240.0*xi5*a4...
             -6646834404.0*xi5*a2-54440505.0*b*xi4+4376616300.0*b3*xi12...
             +3370225320.0*b3*xi8+108881010.0*b*xi6+5803520562.0*b3*xi10...
             +810061560.0*b2*xi9+674968140.0*b2*xi7+269914680.0*b2*xi5...
             -15812768160.0*b3*xi8*a2-6469787520.0*b3*xi4*a4-3579357600.0*b2*xi7*a2...
             +3616462080.0*b2*xi5*a4-3972719520.0*b2*xi9*a2-1862663040.0*b2*xi5*a2...
            -453146400.0*b*xi6*a2+444335220.0*b*xi4*a2-601269480.0*xi3*b2*a2...
            +1570363200.0*xi3*b2*a4-7420442400.0*b5*a4+8292858084.0*b5*a2...
            +40497430680.0*b5*xi6-27418214880.0*b4*xi7*a2+10989457920.0*b4*xi5*a4...
            -2403887220.0*b4*xi*a2-138326077512.0*b4*xi9*a2-93640050.0*b3*xi2...
            -5973367680.0*b4*xi3*a2-221980500.0*b3*xi4-5665265550.0*b5*xi2...
            -2611375200.0*b4*xi5*a2+3318070985910.0*b5*xi12+382395262662.0*b5*xi8...
            +729269730.0*b3*xi6+6271927200.0*b4*xi*a4-7757702505.0*b5*xi4...
            +16854324480.0*b4*xi3*a4+1545419874348.0*b5*xi10+1456166565.0*xi5...
            +39470321520.0*b5*xi4*a2-22713112800.0*b5*xi6*a2-3351922560.0*b3*xi6*a2...
            -2824476480.0*b3*xi2*a4+2140810560.0*b3*xi4*a2+914797800.0*b3*xi2*a2...
            -26265072960.0*b5*xi2*a4+28704987360.0*b5*xi2*a2-45478312488.0*b5*xi8*a2...
            -36615045600.0*b5*xi4*a4+67512690.0*xi3*b2+40009875318.0*b4*xi9...
            +7559584200.0*b4*xi7-1645589925.0*b5+90141660.0*b4*xi5...
            +609570360.0*b4*xi3+269991225.0*b4*xi)/(b4*xi5);
    end
    zeta1=zetak(2)/nu2+zetak(3)/nu4+zetak(4)/nu6;
    eps=zeta1;
    zeta=zetak(1)+eps;
    x=zeta;
    zetakk=zeta;
    t=1.0;
    k=1;
    while ((abs(t)>1.0e-18)&&(k < 69))
      k=k+1;
      zetakk=zeta*zetakk;
      t=xk(k)*zetakk;
      x=x+t;
    end
    xc=x*2.0*nu;
    xct1(i)=xc;
    expa=expandBessel(n,a,xc,i,jzer,zeta,zeta0,zeta1);
    was1(i)=expa;
  end
end 
function [xct,was]=airyNodesWGL(alpha,n,nairy)
%-----------------------------------------------------------
%Computation of the nodes and derivatives (for the weights) 
%of Gauss-Laguerre quadrature
%using the asymptotic expansion in terms of 
%Airy functions.
%-----------------------------------------------------------
ak=[-2.33810741045976703848919725245;
    -4.08794944413097061663698870146;
    -5.52055982809555105912985551293;
    -6.78670809007175899878024638450;
    -7.94413358712085312313828055580;
    -9.02265085334098038015819083988;
    -10.0401743415580859305945567374;
    -11.0085243037332628932354396496;
    -11.9360155632362625170063649029;
    -12.8287767528657572004067294072;
    -13.6914890352107179282956967795;
    -14.5278299517753349820739814430;
    -15.3407551359779968571462085135;
    -16.1326851569457714393459804472;
    -16.9056339974299426270352387706;
    -17.6613001056970575092536503040;
    -18.4011325992071154158613979295;
    -19.1263804742469521441241486897;
    -19.8381298917214997009475636160;
    -20.5373329076775663599826814113];
  kappa=n+(alpha+1.0)*0.5;
  nu=4.0*kappa;
  nu2=nu*nu;
  nu4=nu2*nu2;
  mu=(alpha-1.0)*0.5;
  mu2=mu*mu;
  mu3=mu2*mu;
  mu4=mu3*mu;
  NS=n-nairy;
  NF=n;
  k=0;
  for j=NS+1:NF
    m=n+1-j;
    nc=m;
    if (m>20) 
      t=3.0*pi/8*(4.0*m-1.0);
      t2=t*t;
      t4=t2*t2;
      t6=t4*t2;
      t8=t6*t2;
      t10=t8*t2;
      akm=-t^(2.0/3.0)*(1.0+5/(48*t2)-5.0/(36*t4)+77125.0/(82944*t6)...
           -108056875.0/(6967296*t8)+162375596875.0/(334430208.0*t10));
    else
      akm=ak(m);  
    end
    zeta=nu^(-2.0/3.0)*akm;
    zetai=zeta;
    zeta2=zeta*zeta;
    zeta5=zeta2*zeta2*zeta;
    p=(4.0/3.0)*(-zeta)^(3.0/2.0);
    if (p>0.5) 
      x=p+sin(2*p)*0.5;
    else
      x=(1.5*p)^(1.0/3.0);
    end   
    preci=1.0;
    iter=0;
    if p>0.01
      while (preci>5.e-15) && iter<15
        iter=iter+1;  
        xold=x;
        yp=2*sin(x)^2;
        y=x-0.5*sin(2*x)-p;
        delta=y/yp;
        x=x-delta;
        preci=abs(delta/xold); 
      end
    else
        x2=x*x;
        x4=x2*x2;
        x6=x4*x2;
        x8=x4*x4;
        x10=x6*x4;
        x12=x6*x6;
        x14=x8*x6;
        sx=1+6.666666666666667e-2*x2+1.142857142857143e-2*x4+...
           2.539682539682540e-3*x6+6.382189239332096e-4*x8+...
           1.723432123432123e-4*x10+4.879019191944362e-5*x12+...
           1.428170484977208e-5*x14;
        x=x*sx;
    end 
    
    xt=cos(x)*cos(x);
    x=xt;
    x2=x*x;
    x3=x2*x;
    x4=x3*x;
    x5=x4*x;
    x6=x5*x;
    x7=x6*x;
    x8=x7*x;
    x9=x8*x;
    x10=x9*x;
    x11=x10*x;
    x12=x11*x;
    x13=x12*x;
    x14=x13*x;
    x15=x14*x;
    x16=x15*x;
    x17=x16*x;
    x18=x17*x;
    a1=(4.0*zeta/x3/(x-1.0))^(0.25);
    a12=a1*a1;
    a13=a12*a1;
    a14=a13*a1;
    a15=a14*a1;
    a16=a15*a1;
    a17=a16*a1;
    a18=a17*a1;
    a19=a18*a1;
    a110=a19*a1;
    a111=a110*a1;
    a112=a111*a1;
    a113=a112*a1;
    a114=a113*a1;
    a115=a114*a1;
    a116=a115*a1;
    a117=a116*a1;
    a118=a117*a1;
    zetak(1)=-(1.0/192.0)*(-20.0+48.0*mu*a16*x6-96.0*mu*a16*x5+9.0*a16*x4...
           +48.0*mu2*a16*x6-96.0*mu2*a16*x5+8.0*a16*x6-12.0*a16*x5...
           +48.0*mu2*a16*x4+48.0*mu*a16*x4)/zeta2;
    zetak(2)=-(1.0/2949120.0)*(-345600.0-38400.0*mu*a16*x6...
           +76800.0*mu2*a16*x5-38400.0*mu2*a16*x4-38400.0*mu2*a16*x6...
           +46080.0*mu4*a112*x12+61440.0*mu2*a112*x12+76800.0*mu*a16*x5...
           -353280.0*mu2*a112*x11-38400.0*mu*a16*x4-184320.0*mu4*a112*x11...
           +276480.0*mu4*a112*x10-184320.0*mu4*a112*x9+15360.0*mu*a112*x12...
           -168960.0*mu*a112*x11+395520.0*mu*a112*x10-345600.0*mu*a112*x9...
           +92160.0*mu3*a112*x12-368640.0*mu3*a112*x11+552960.0*mu3*a112*x10...
           +149760.0*mu2*a112*x8+92160.0*mu3*a112*x8+46080.0*mu4*a112*x8...
           +103680.0*mu*a112*x8+672000.0*mu2*a112*x10-529920.0*mu2*a112*x9...
           -368640.0*mu3*a112*x9+92160.0*mu*a118*x17-391680.0*mu*a118*x16...
           +702720.0*mu*a118*x15-672480.0*mu*a118*x14+342720.0*mu*a118*x13...
           +30720.0*mu2*a118*x18+230400.0*mu2*a118*x17-1463040.0*mu2*a118*x16...
           +2991360.0*mu2*a118*x15-2953440.0*mu2*a118*x14+1448640.0*mu2*a118*x13...
           +30720.0*mu4*a118*x18+138240.0*mu4*a118*x17-1071360.0*mu4*a118*x16...
           +2288640.0*mu4*a118*x15+61440.0*mu3*a118*x18+276480.0*mu3*a118*x17...
           -2142720.0*mu3*a118*x16+4577280.0*mu3*a118*x15+2211840.0*mu3*a118*x13...
           -2280960.0*mu4*a118*x14+1105920.0*mu4*a118*x13-211200.0*mu4*a118*x12...
           -284640.0*mu2*a118*x12-73440.0*mu*a118*x12-4561920.0*mu3*a118*x14...
           -422400.0*mu3*a118*x12-7200.0*a16*x4-6400.0*a16*x6+9600.0*a16*x5...
           +17820.0*a112*x8-23040.0*a112*x11+48960.0*a112*x10-47520.0*a112*x9...
           +1280.0*a112*x12-6345.0*a118*x12-45720.0*a118*x14-1024.0*a118*x18...
           +25380.0*a118*x13+12288.0*a118*x17-36864.0*a118*x16+58560.0*a118*x15...
           +460800.0*a18*x7*zeta*mu-768000.0*a18*x6*zeta*mu+460800.0*a18*x7*zeta*mu2...
           -768000.0*a18*x6*zeta*mu2+307200.0*a18*x5*zeta*mu2+307200.0*a18*x5*zeta*mu...
           +5237760.0*a114*x12*zeta*mu2+1182720.0*a114*x12*zeta*mu-1574400.0*a114*x11*zeta*mu...
           +1036800.0*a114*x10*zeta*mu-1013760.0*a114*x9*zeta*mu2-276480.0*a114*x9*zeta*mu...
           -7104000.0*a114*x11*zeta*mu2+4354560.0*a114*x10*zeta*mu2-30720.0*a114*x13*zeta...
           +57600.0*a18*x5*zeta+76800.0*a18*x7*zeta-96000.0*a18*x6*zeta-115200.0*a114*x11*zeta...
           +77760.0*a114*x10*zeta-25920.0*a114*x9*zeta+84480.0*a114*x12*zeta...
           -368640.0*a114*x13*zeta*mu-2211840.0*a114*x13*zeta*mu3+8110080.0*a114*x12*zeta*mu3...
           -11059200.0*a114*x11*zeta*mu3-1474560.0*a114*x9*zeta*mu3-737280.0*a114*x9*zeta*mu4...
           +6635520.0*a114*x10*zeta*mu3-1474560.0*a114*x13*zeta*mu2-1105920.0*a114*x13*zeta*mu4...
           +4055040.0*a114*x12*zeta*mu4-5529600.0*a114*x11*zeta*mu4+3317760.0*a114*x10*zeta*mu4)...
           /zeta5;
    e=zetak(1)/nu2+zetak(2)/nu4;  
    zeta=zeta+e;
    p=4.0/3.0*(-zeta)^(3.0/2.0);
    if (p>0.5) 
     x=p+sin(2*p)*0.5;
    else
     x=(1.5*p)^(1.0/3.0);
    end   
    preci=1.0;
    iter=0;

   
   if p>0.01
      while (preci>5.e-15) && iter<15
        iter=iter+1;  
        xold=x;
        yp=2*sin(x)^2;
        y=x-0.5*sin(2*x)-p;
        delta=y/yp;
        x=x-delta;
        preci=abs(delta/xold); 
      end
   else
        x2=x*x;
        x4=x2*x2;
        x6=x4*x2;
        x8=x4*x4;
        x10=x6*x4;
        x12=x6*x6;
        x14=x8*x6;
        sx=1+6.666666666666667e-2*x2+1.142857142857143e-2*x4+...
           2.539682539682540e-3*x6+6.382189239332096e-4*x8+...
           1.723432123432123e-4*x10+4.879019191944362e-5*x12+...
           1.428170484977208e-5*x14;
        x=x*sx;
   end    
   xt=cos(x)*cos(x);
   k=k+1;
   xct(k)=xt*nu;
   xx=xct(k);
   zz=zetai+e;
   expay=expandAiry(n,alpha,xx,nc,zz,e,akm);
   was(k)=expay;
 end
end
%---------------------------------------------------------
function expa=expandBessel(n,a,z,i,jzer,zeta,zeta0,zper)
%---------------------------------------------------------
% This is the Bessel expansion for the normalized
% derivative of the Laguerre polynomials.
% Few terms are used in the expansion.
% The argument is x=z/(2*nu).
%---------------------------------------------------------
nu=2.0*n+a+1.0; 
nu2=nu*nu;   
nu3=nu2*nu;
nu4=nu2*nu2;   
x=z/(2*nu);
b=sqrt(zeta);
b2=b*b;
b3=b2*b;
b4=b3*b;
a2=a*a;
a3=a2*a;
a4=a3*a; 
a5=a4*a;
a6=a5*a;
a7=a6*a;
a8=a7*a;
a9=a8*a;
a10=a9*a;
if x>0.01
  xi=sqrt(x/(1.0-x));
  xi2=xi*xi;
  xi3=xi2*xi;
  xi4=xi3*xi;
  xi5=xi4*xi;
  xi6=xi5*xi;
  xi7=xi6*xi;
  xi8=xi7*xi;
  xi9=xi8*xi;
  xi10=xi9*xi;
  xi11=xi10*xi;
  xi12=xi11*xi;
  xi13=xi12*xi;
  xi14=xi13*xi;
  xi15=xi14*xi;
  xi16=xi15*xi;
  Bk0=0.0208333333333333333333333333333*(3*xi-3*b+12*b*a2-12*xi*a2+5*xi4*b+6*xi2*b)/xi;
  Ak1=-0.000217013888888888888888888888889*(-135*xi2+81*b2-90.0*xi5*b-108*xi3*b+54*xi*b+...
     252*b2*xi2+924*b2*xi6+385*b2*xi8+726.0*b2*xi4-360.0*b2*a2...
     +144*b2*a4+504*xi2*a2-144*xi2*a+144*xi2*a4+576*xi2*a3-144.0*xi3*b*a2...
     -288.0*xi3*b*a-168.0*b2*xi4*a2-432.0*b2*xi2*a2+384.0*b2*xi2*a3...
     -384.0*b2*xi2*a-288.0*xi*b*a4-576.0*xi*b*a3-144.0*xi*b*a2...
     +144.0*xi*b*a-120.0*xi5*b*a2-240.0*xi5*b*a)/(b2*xi2);
  Ak2=1.56983426568930041152263374486e-9*(-5740875.0*xi4-850500.0*xi7*b...
    -1020600.0*xi5*b+510300.0*xi3*b-328050.0*b2*xi2...
    -2940300.0*b2*xi6-3742200.0*b2*xi8-1020600.0*b2*xi4...
    -2177280.0*b4*a6+103680.0*b4*a8-12610080.0*xi4*a4+13426560.0*xi4*a3...
    +26069040.0*xi4*a2-2916000.0*xi4*a+725760.0*xi4*a6...
    -7257600.0*xi4*a5+103680.0*xi4*a8+829440.0*xi4*a7...
    -20923920.0*b4*a2+12791520.0*b4*a4-207360.0*xi5*b*a6-1244160.0*xi5*b*a5...
    +1658880.0*b4*xi2*a7-73513440.0*xi11*b3*a2-147026880.0*xi11*b3*a...
    +1663200.0*b2*xi10*a4+6652800.0*b2*xi10*a3+5821200.0*b2*xi10*a2...
    -1663200.0*b2*xi10*a-2695680.0*b3*xi5*a5-518400.0*b3*xi5*a6...
    -20420400.0*xi13*b3*a2-40840800.0*xi13*b3*a-3991680.0*b3*xi*a4...
    -13426560.0*b3*xi*a3-3576960.0*b3*xi*a2+2916000.0*b3*xi*a...
    -10795680.0*b3*xi3*a2+6765120.0*b3*xi3*a+3991680.0*b2*xi8*a4...
    +15966720.0*b2*xi8*a3+3931200.0*b3*xi9*a4+7862400.0*b3*xi9*a3...
    -95954976.0*b3*xi9*a2-414720.0*b3*xi*a8-829440.0*b3*xi*a7...
    +3317760.0*b3*xi*a6+7257600.0*b3*xi*a5-172800.0*xi7*b*a6...
    -1036800.0*xi7*b*a5-3317760.0*b3*xi3*a7+2695680.0*b3*xi3*a6...
    +20321280.0*b3*xi3*a5-1814400.0*b3*xi3*a4-31933440.0*b3*xi3*a3...
    +5365440.0*b3*xi5*a4-725760.0*b2*xi6*a6+4435200.0*b4*xi10*a3...
    +9486720.0*xi3*b*a4-2954880.0*xi3*b*a3-414720.0*xi3*b*a8...
    -2488320.0*xi3*b*a7-2488320.0*xi3*b*a6+6842880.0*xi3*b*a5...
    -1080000.0*xi7*b*a4+2592000.0*xi7*b*a3+3682800.0*xi7*b*a2...
    -583200.0*xi7*b*a-197806752.0*b3*xi9*a+18558720.0*b3*xi5*a3...
    -4555440.0*b3*xi5*a2-28110240.0*b3*xi5*a+13970880.0*b2*xi8*a2...
    -3991680.0*b2*xi8*a-49178880.0*b3*xi7*a2-118247040.0*b3*xi7*a...
    -1296000.0*xi5*b*a4+3110400.0*xi5*b*a3-1382400.0*b3*xi7*a5...
    +7499520.0*b3*xi7*a4+20874240.0*b3*xi7*a3-1935360.0*b4*xi6*a5...
    +9797760.0*b4*xi6*a4+10298880.0*b4*xi6*a3-88724160.0*b4*xi6*a2...
    -8363520.0*b4*xi6*a-22822800.0*b4*xi12*a2-84823200.0*b4*xi10*a2...
    -4435200.0*b4*xi10*a+1658880.0*b2*xi4*a7+4769280.0*b2*xi4*a6...
    -3317760.0*b2*xi4*a5-13737600.0*b2*xi4*a4-1140480.0*b2*xi4*a3...
    -2903040.0*b2*xi6*a5+596160.0*b2*xi6*a4+13271040.0*b2*xi6*a3...
    +11657520.0*b2*xi6*a2-3136320.0*b2*xi6*a+622080.0*b2*xi2*a8...
    +2488320.0*b2*xi2*a7+622080.0*b2*xi2*a6-6842880.0*b2*xi2*a5...
    -5676480.0*b2*xi2*a4-7257600.0*b4*xi2*a6-5806080.0*b4*xi2*a5...
    +41731200.0*b4*xi2*a4+5080320.0*b4*xi2*a3-63050400.0*b4*xi2*a2...
    -933120.0*b4*xi2*a+1663200.0*b4*xi8*a4+10644480.0*b4*xi8*a3...
    -119403504.0*b4*xi8*a2-10644480.0*b4*xi8*a+3628800.0*b4*xi4*a6...
    -20901888.0*b4*xi4*a5+17236800.0*b4*xi4*a4+60963840.0*b4*xi4*a3...
    -63730800.0*b4*xi4*a2-40061952.0*b4*xi4*a-4250880.0*xi3*b*a2...
    +349920.0*xi3*b*a+7218720.0*b2*xi4*a2+466560.0*b2*xi4*a...
    +2682720.0*b2*xi2*a2+2954880.0*b2*xi2*a3-349920.0*b2*xi2*a...
    +4419360.0*xi5*b*a2-699840.0*xi5*b*a+27862380.0*b4*xi4...
    +885268926.0*b4*xi8+1728175020.0*b4*xi12+1706284008.0*b4*xi10...
    +892371480.0*b4*xi14+185910725.0*b4*xi16-1559250.0*b2*xi10...
    -74177532.0*b3*xi9+1093500.0*b3*xi-15315300.0*xi13*b3...
    -55135080.0*xi11*b3+2770200.0*b3*xi3-11007900.0*b3*xi5...
    -44731440.0*b3*xi7+220789800.0*b4*xi6+13267800.0*b4*xi2...
    +4465125.0*b4)/(b4*xi4);
  Bk1=-3.0140179012345679012345679012e-7*(30375.0*xi3+7290.0*xi4*b...
    -3645.0*xi2*b-30375.0*b3+11340.0*b2*xi3-8640.0*xi3*a6...
    +75600.0*xi3*a4+139860.0*b3*a2-75600.0*b3*a4+8640.0*b3*a6...
    -139860.0*xi3*a2+25920.0*xi2*b*a6-81900.0*b3*xi8*a2...
    -166320.0*b2*xi7*a2+12960.0*xi4*b*a4-32400.0*xi4*b*a2-25920.0*b2*xi*a6...
    +34560.0*b3*xi4*a3-189000.0*b3*xi4*a2-34560.0*b3*xi4*a+30780.0*xi2*b*a2...
    -69300.0*b2*xi9*a2-71280.0*xi2*b*a4+10800.0*b3*xi4*a4-138240.0*b2*xi5*a2...
    +30240.0*b2*xi5*a4-69120.0*b2*xi3*a5+77760.0*b2*xi3*a4+...
     86400.0*b2*xi3*a3-64800.0*b2*xi3*a2-17280.0*b2*xi3*a...
    -30780.0*b2*xi*a2+10800.0*xi6*b*a4-27000.0*xi6*b*a2...
    +69120.0*b3*xi2*a5-194400.0*b3*xi2*a4-86400.0*b3*xi2*a3...
    +356400.0*b3*xi2*a2+17280.0*b3*xi2*a+71280.0*b2*xi*a4...
    -213840.0*b3*xi6*a2-28800.0*b3*xi6*a+28800.0*b3*xi6*a3...
    +17325.0*b2*xi9+32670.0*b2*xi5+41580.0*b2*xi7+3645.0*b2*xi...
    +1531530.0*b3*xi10-76950.0*b3*xi2+1242540.0*b3*xi6...
    +305775.0*b3*xi4+425425.0*b3*xi12+2060487.0*b3*xi8...
    +6075.0*xi6*b)/(b2*xi3);
  Bkp0=0.0104166666666666666666666666667*(-3.0*xi+12.0*xi2*b+30.0*xi4*b...
     +36.0*xi6*b+6.0*xi3+15.0*xi8*b+5.0*xi5...
     +12.0*xi*a2+3.0*b-12.0*a2*b-24.0*a2*xi2*b...
     -12.0*xi4*a2*b)/xi3;
  Akp1=-0.000651041666666666666666666666667*(-60.0*xi9*a2*b2+48.0*xi5*a4*b2-...
     144.0*xi7*a2*b2...
    +96.0*xi3*a4*b2-56.0*xi8*a2*b3-48.0*xi4*a4*b3+240.0*a2*xi2*b3...
    +64.0*xi4*a2*b3-112.0*xi6*a2*b3-96.0*xi2*a4*b3+192.0*a3*xi3*b2...
    +24.0*a2*xi3*b2-96.0*a*xi3*b2-84.0*xi5*a2*b2+48.0*xi*a4*b2...
    +24.0*xi*a2*b2+20.0*xi6*a2*b+48.0*xi2*a4*b+24.0*xi4*a2*b+...
     24.0*a2*xi2*b-9.0*xi2*b+18.0*xi4*b+120.0*a2*b3-48.0*a4*b3...
    +385.0*xi12*b3+1386.0*xi10*b3+1859.0*xi8*b3+...
     1100.0*xi6*b3-54.0*xi2*b3+215.0*xi4*b3-9.0*b2*xi...
    -108.0*xi7*b2-90.0*xi5*b2-36.0*xi3*b2-45.0*xi9*b2...
    -48.0*xi3*a4-168.0*xi3*a2+15.0*xi6*b+45.0*xi3...
    -27.0*b3+96.0*xi5*a3*b2-240.0*xi5*a*b2-192.0*xi3*a3...
    +48.0*a*xi3-288.0*xi7*a*b2+48.0*a*xi4*b+96.0*xi2*a3*b...
    -24.0*xi2*a*b+40.0*xi6*a*b-120.0*b2*xi9*a-24.0*a*b2*xi+96.0*a3*b2*xi)...
             /(b3*xi4); 
  Akp2=-0.651041666666666666666666666667e-3*(-60.0*xi9*a2*b2+48.0*xi5*a4*b2...
     -144.0*xi7*a2*b2+96.0*xi3*a4*b2-56.0*xi8*a2*b3-48.0*xi4*a4*b3...
     +240.0*a2*xi2*b3+64.0*xi4*a2*b3-112.0*xi6*a2*b3-96.0*xi2*a4*b3...
     +192.0*a3*xi3*b2+24.0*a2*xi3*b2-96.0*a*xi3*b2-84.0*xi5*a2*b2...
     +48.0*xi*a4*b2+24.0*xi*a2*b2+20.0*xi6*a2*b+48.0*xi2*a4*b...
     +24.0*xi4*a2*b+24.0*a2*xi2*b-9.0*xi2*b+18.0*xi4*b...
     +120.0*a2*b3-48.0*a4*b3+385.0*xi12*b3+1386.0*xi10*b3...
     +1859.0*xi8*b3+1100.0*xi6*b3-54.0*xi2*b3+215.0*xi4*b3...
     -9.0*b2*xi-108.0*xi7*b2-90.0*xi5*b2-36.0*xi3*b2-45.0*xi9*b2...
     -48.0*xi3*a4-168.0*xi3*a2+15.0*xi6*b+45.0*xi3-27.0*b3+96.0*xi5*a3*b2...
     -240.0*xi5*a*b2-192.0*xi3*a3+48.0*a*xi3-288.0*xi7*a*b2...
     +48.0*a*xi4*b+96.0*xi2*a3*b-24.0*xi2*a*b+40.0*xi6*a*b...
     -120.0*b2*xi9*a-24.0*a*b2*xi+96.0*a3*b2*xi)/(b3*xi4);
  Bkp1=-0.150704089506172839506172839506e-6*(-93960.0*xi4*a2*b2-30780.0*a2*xi3*b...
     -30780.0*a2*xi2*b2+32400.0*xi5*a2*b-1321380.0*xi4*a2*b4...
     +86400.0*xi2*a3*b4+207360.0*xi4*a3*b4-69120.0*a*xi4*b4...
     -17280.0*a*xi2*b4+648000.0*xi2*a4*b4-1881540.0*xi8*a2*b4...
     -69120.0*xi2*a5*b4+241920.0*xi6*a3*b4+626400.0*xi4*a4*b4...
     -1195560.0*a2*xi2*b4-409500.0*xi12*a2*b4+86400.0*xi10*a3*b4...
     -86400.0*a*xi10*b4+207360.0*a3*xi8*b4-1460520.0*xi10*a2*b4...
     -207360.0*a*xi8*b4+10800.0*xi8*a4*b4-51840.0*xi2*a6*b4...
     -25920.0*xi4*a6*b4-69120.0*xi6*a5*b4-138240.0*xi4*a5*b4...
     +216000.0*xi6*a4*b4-1375920.0*xi6*a2*b4-172800.0*xi6*a*b4...
     +17280.0*a*xi3*b3-34560.0*xi5*a*b3-403920.0*xi5*a2*b3...
     -218160.0*xi*a4*b3+201420.0*xi*a2*b3+32400.0*xi10*a4*b2...
     -415800.0*xi13*a2*b3+60480.0*xi9*a4*b3+77760.0*xi8*a4*b2...
     +120960.0*xi7*a4*b3+28800.0*xi7*a3*b3+103680.0*xi3*a6*b3...
     -51840.0*xi4*a6*b2-1496880.0*xi11*a2*b3+60480.0*xi*a6*b3...
     +34560.0*xi5*a3*b3-2104740.0*xi9*a2*b3-71280.0*xi5*a4*b3...
     +69120.0*xi3*a5*b3-1432080.0*xi7*a2*b3-28800.0*xi7*a*b3...
     -479520.0*xi3*a4*b3-86400.0*xi3*a3*b3+479520.0*xi3*a2*b3...
     +51840.0*xi5*a6*b3-25920.0*xi6*a6*b2-10800.0*xi7*a4*b...
     -81000.0*xi10*a2*b2-25920.0*xi2*a6*b2+129600.0*xi6*a4*b2...
     -25920.0*xi3*a6*b+155520.0*xi4*a4*b2-194400.0*xi8*a2*b2...
     -12960.0*xi5*a4*b+71280.0*xi2*a4*b2-176580.0*xi6*a2*b2...
     +27000.0*xi7*a2*b+71280.0*xi3*a4*b+43740.0*xi8*b2...
     +36450.0*xi6*b2+3645.0*xi2*b2+14580.0*xi4*b2...
     -7290.0*xi5*b+3645.0*xi3*b+363825.0*xi5*b3-37665.0*xi*b3...
     +2562417.0*xi9*b3+1539540.0*xi7*b3+529375.0*xi13*b3...
     +1905750.0*xi11*b3-419580.0*a2*b4+226800.0*a4*b4...
     -25920.0*a6*b4+3828825.0*xi16*b4+18378360.0*xi14*b4+...
      35572680.0*xi12*b4+35053200.0*xi10*b4+18063450.0*xi8*b4...
     +4416120.0*xi6*b4+259200.0*xi2*b4+550800.0*xi4*b4...
     -91530.0*b3*xi3+17280.0*xi4*a6+18225.0*xi10*b2...
     -151200.0*xi4*a4+279720.0*xi4*a2-6075.0*xi7*b...
     -60750.0*xi4+91125.0*b4)/(b3*xi5);
else
  am1=a-1.0;
  am2=a-2.0;
  am3=a-3.0;
  am4=a-4.0;
  am5=a-5.0;
  ap1=a+1.0;
  ap2=a+2.0;
  ap3=a+3.0;
  Ajk1(1)=(-a*am1*ap1)/6.0;
  Ajk1(2)=(-am1*(5*a-7)*ap3*ap2)/360.0;
  Ajk1(3)=(-ap3*(56*a3-27*a2-572*a+783.0))/7560.0;
  Ajk1(4)=(64696.0*a+45894.0*a2-2043.0*a4-4984.0*a3...
          -266763.0)/453600.0;
  Ajk1(5)=(2398016.0*a+1683586.0*a2-45133.0*a4...
          -107072.0*a3-14210997.0)/14968800.0;
  Ajk1(6)=(1801442826.0*a+1245160144.0*a2-22138519.0*a4...
          -51306714.0*a3-14247720297.0)/10216206000.0;
  Ajk1(7)=(5861836126.0*a+3988189392.0*a2-50326293.0*a4...
          -114425806.0*a3-58962150219.0)/30648618000.0;
  Ajk1(8)=(3207235599296.0*a+2150456098114.0*a2...
          -20242238317.0*a4-45316946624.0*a3-39653767783509.0)...
              /15630795180000.0;
  Ajk1(9)=(1361320605708360.0*a+900863394173338.0*a2-6568985555701.0*a4...
           -14522213048712.0*a3-20168443775676645.0)/6236687276820000.0;
  Ajk1(10)=(59338789090005625.0*a+38810458604769705.0*a2-225782261133936.0*a4...
           -494021272598785.0*a3-1032806063366861169.0)/257263350168825000.0;
  Ajk1(11)=(4303235416418007521.0*a+2785225660897962187.0*a2-13234600210671241.0*a4...
          -28711792680720041.0*a3-86609901203330123706.0)/17751171161648925000.0;
  Ajk1(12)=(24584469202979144173464.0*a+15763447858169156655386.0*a2...
          -62362434156129964205.0*a4-134329438816295061336.0*a3...
          -564797605936645148396589.0)/96921394542603130500000.0;
  Ajk1(13)=(76883847161827795603568.0*a+48882524238993554243898.0*a2...
          -163581504477887038401.0*a4-350234234592171416816.0*a3...
          -1994459279475183362997369.0)/290764183627809391500000.0;
  Ajk1(14)=(17376869771479551363367438.0*a+10963870399650376582647332.0*a2...
          -31451905517388571203839.0*a4-66992838304009422280702.0*a3...
          -504352922835652205264651829.0)/63241209939048542651250000.0;
  Ajk1(15)=(128955520299110978308983056046.0*a+80798567172130545072007892476.0*a2...
          -200968293178911536287341163.0*a4-426160137840234290814072222.0*a3...
          -4154837379480772840475988127137.0)/452870304373526613925601250000.0;
  Ajk1(16)=(67995153972110135421717031609808.0*a+42332163827075541073340895754002.0*a2...
          -92191925084649246001858274637.0*a4-194738580699329372431639372112.0*a3...
          -2415307684975046827326625533363141.0)/230963855230498573102056637500000.0;
  Ajk1(17)=(210458834801319452565312704441048.0*a+130260402089225233761965772586306.0*a2...
          -250519380645042428372970459409.0*a4-527375648543310784406431082648.0*a3...
          -8192914696421942452238846507814897.0)/692891565691495719306169912500000.0;    
  Ajk2(1)=(a*am1*am2*am3*(5.0*a+7.0)*ap1)/360.0;
  Ajk2(2)=(am1*am2*am3*ap3*ap2*(7.0*a2-31.0))/4536.0;
  Ajk2(3)=(am2*am3*ap3*(175.0*a5+5740.0*a4+138.0*a3...
          -95320.0*a2+9287.0*a+442860.0))/5443200.0;
  Ajk2(4)=(am3*(3080.0*a7+69949.0*a6-45001.0*a5...
          -2550026.0*a4+409442.0*a3+33303637.0*a2-4612641.0*a...
          -155763720.0))/89812800.0;
  Ajk2(5)=(-1501889577543.0*a-1119549784453.0*a2+63694589635.0*a4...
          +248385030581.0*a3-1538422847.0*a6-13572721237.0*a5...
          +14709695.0*a8+238397159.0*a7+6917639910210.0)/490377888000.0;
  Ajk2(6)=(-7873075325268.0*a-5867870534784.0*a2+258895812806.0*a4...
          +1005527035036.0*a3-4934074696.0*a6-42119370812.0*a5...
          +36895859.0*a8+537431284.0*a7+47390718840975.0)/1471133664000.0;
  Ajk2(7)=(-26019355331766600.0*a-19291482131133108.0*a2...
          +684215614567586.0*a4+2664099967736152.0*a3-10578230432932.0*a6...
          -88973895056600.0*a5+62597653079.0*a8+854375902408.0*a7...
          +195813470861086815.0)/3001112674560000.0;
  Ajk2(8)=(-7938044445501300888.0*a-5842206071348746724.0*a2...
          +171135339062925522.0*a4+669880032544869960.0*a3...
          -2196149047601076.0*a6-18367958958380232.0*a5...
          +10465274283863.0*a8+136865293944600.0*a7+72389767059921502575.0)...
              /598721978574720000.0;
  Ajk2(9)=(-1276023341258302721760.0*a-931425215480334762812.0*a2...
          +23014756859716288002.0*a4+90671746248332178720.0*a3-249840072319391388.0*a6...
          -2087852481662132640.0*a5+975933966169283.0*a8+12390415127772000.0*a7...
          +13775491647537418462995.0)/65859417643219200000.0;
  Ajk2(10)=(-15503898299013694609296.0*a-11221842636817966875028.0*a2...
          +237877966165708953898.0*a4+943647283385334605776.0*a3...
          -2219161350815813732.0*a6-18577501718990826224.0*a5...
          +7223765582466587.0*a8+89759120774455984.0*a7+...
          194583444426194968838835.0)/568037477172765600000.0;
  Ajk2(11)=(-347092139121754560799572792.0*a-249142328410753153761107740.0*a2...
          +4593841103807771869749890.0*a4+18350305261122565348938280.0*a3...
          -37319499247742011995580.0*a6-313399500393570068480168.0*a5...
          +102730688485891848915.0*a8+1255943141661790761400.0*a7...
          +4991477048937075728277002115.0)/9304453876089900528000000.0;
  Ajk2(12)=(-138753266202835654315741056.0*a-98795986350407348021866236.0*a2...
          +1602932645441457667255438.0*a4+6446689690955292493950464.0*a3...
          -11467603838427319199468.0*a6-96675049604209274482048.0*a5...
          +27041459917783788841.0*a8+326456804346642738944.0*a7...
          +2259365326082449560264031281.0)/2791336162826970158400000.0;
  Ajk2(13)=(-787123811515765442994767391372.0*a-556132470830183460470797923264.0*a2...
          +8017579936056909039358676510.0*a4+32458029909327882986337756580.0*a3...
          -51000061697369183361364456.0*a6-431760139903415611621999268.0*a5...
          +104190460007006324992655.0*a8+1245256543957746105440140.0*a7...
          +14369282061405183131029833309435.0)/12142312308297320189040000000.0;
  Bjk0(1)=(-am1*ap1)/6.0;
  Bjk0(2)=(-am3*ap3)/60.0;
  Bjk0(3)=(55.0-3*a2)/315.0;
  Bjk0(4)=(62.0-2.0*a2)/315.0;
  Bjk0(5)=(752.0-16.0*a2)/3465.0;
  Bjk0(6)=(6368.0-96.0*a2)/27027.0;
  Bjk0(7)=(11392.0-128.0*a2)/45045.0;
  Bjk0(8)=(-256.0*a2+29440.0)/109395.0;
  Bjk0(9)=(-12288.0*a2+1773568.0)/6235515.0;
  Bjk0(10)=(-8192.0*a2+1449984.0)/4849845.0;
  Bjk0(11)=(-32768.0*a2+6979584.0)/22309287.0;
  Bjk0(12)=(49610752.0-196608.0*a2)/152108775.0;
  Bjk0(13)=(-524288.0*a2+154664960.0)/456326325.0;
  Bjk0(14)=(-1048576.0*a2+357564416.0)/1017958725.0;
  Bjk0(15)=(-12582912.0*a2+4911529984.0)/13524308775.0;
  Bjk0(16)=(-8388608.0*a2+3716153344.0)/9917826435.0;
  Bjk0(17)=(-268435456.0*a2+133949292544.0)/347123925225.0;
  Bjk0(18)=(-1610612736.0*a2+899258777600.0)/2266515041175.0;
  Bjk0(19)=(-2147483648.0*a2+1333587345408.0)/3273855059475.0;
  Bjk0(20)=(-4294967296.0*a2+2950642532352.0)/7064634602025.0;
  Bjk1(1)=(am1*am2*am3*(5.0*a+7.0)*ap1)/360.0;
  Bjk1(2)=(am2*am3*ap3*(35.0*a3+133.0*a2-515.0*a-1093.0))/45360.0;
  Bjk1(3)=(am3*(665.0*a5+3075.0*a4-21526.0*a3-85458.0*a2...
          +173501.0*a+540303.0))/1360800.0;
  Bjk1(4)=(491040.0*a+13674737.0*a2-668881.0*a4-506880.0*a3...
          +10043.0*a6+15840.0*a5-77850459.0)/29937600.0;
  Bjk1(5)=(4434393600.0*a+152981888461.0*a2-5536578317.0*a4...
          -4528742400.0*a3+60179119.0*a6+94348800.0*a5-1204187949423.0)...
             /245188944000.0;
  Bjk1(6)=(14442624000.0*a+600635011591.0*a2-16940114759.0*a4...
          -14660352000.0*a3+138649069.0*a6+217728000.0*a5...
          -6177454102701.0)/735566832000.0;
  Bjk1(7)=(658844928000.0*a+32330164051717.0*a2-736945319117.0*a4...
          -666247680000.0*a3+4695910663.0*a6+7402752000.0*a5...
          -417608545155903.0)/31261590360000.0;
  Bjk1(8)=(209799434880000.0*a+11941498273527847.0*a2-225999732971765.0*a4...
          -211623777792000.0*a3+1152420463153.0*a6+1824342912000.0*a5...
          -188133384472275555.0)/9355030915230000.0;
  Bjk1(9)=(292693736079360000.0*a+19056590318112897917.0*a2-305723643366099613.0*a4...
          -294721637253120000.0*a3+1276024295512703.0*a6+2027901173760000.0*a5...
          -358009347126588397407.0)/12348640808103600000.0;
  Bjk1(10)=(2358738765250560000.0*a+173648682862072753077.0*a2...
          -2400797050884645013.0*a4-2372064972963840000.0*a3...
          +8356614763645543.0*a6+13326207713280000.0*a5-3820931284596817289607.0)...
            /94672912862127600000.0;
  Bjk1(11)=(7580598772690944000000.0*a+624930185177920526771851.0*a2...
          -7546674719321321587943.0*a4-7616188438290432000000.0*a3...
          +22251782168054220769.0*a6+35589665599488000000.0*a5...
          -15871969907156361168522117.0)/290764183627809391500000.0;
  Bjk1(12)=(47416823271509852160000.0*a+4341041727510481697509241.0*a2...
          -46303544161014791819761.0*a4-47604736705875148800000.0*a3...
          +117192316343236491299.0*a6+187913434365296640000.0*a5...
          -125725822663720906272054699.0)/1744585101766856349000000.0;
  Bjk1(13)=(14289772719956557824000000.0*a+1442485328633365682270317885.0*a2...
          -13719307954171728082500413.0*a4-14338212627481834291200000.0*a3...
          +30144022857965535758335.0*a6+48439907525276467200000.0*a5...
          -47154806386588189851770418687.0)/505929679512388341210000000.0;
  Bjk1(14)=(318147095614436213155430400000.0*a+35190774297506115300660789598039.0*a2...
          -300861710209025361984748323287.0*a4-319080078299522536361164800000.0*a3...
          +579507022927549283543928541.0*a6+932982685086323205734400000.0*a5...
          -1287134950460723433384872647465053.0)/10868887304964638734214430000000.0;
  Bjk1(15)=(41938775543256145934155776000000.0*a+5055319475327873071068201955086137.0*a2...
          -39124811250897043774880201481169.0*a4-42046219033119312832364544000000.0*a3...
          +66628653748787996059167353123.0*a6+107443489863166898208768000000.0*a5...
          -205321471293806210867705431938471051.0)/1385783131382991438612339825000000.0;
  Bjk1(16)=(21635211822446789048401920000000.0*a+2828228309069025535906986691224407.0*a2...
          -19936645077537612019599676944283.0*a4-21684049772384592183951360000000.0*a3...
          +30242973680187825029950429013.0*a6+48837949937803135549440000000.0*a5...
          -126711544016085289429617156710437137.0)/692891565691495719306169912500000.0;
  Bjk2(1)=(-am1*am2*am3*am4*am5*ap1*(35.0*a2+112.0*a+93.0))/45360.0;
  Bjk2(2)=(-am2*am3*am4*am5*ap3*(175.0*a4+875.0*a3-2239.0*a2...
          -13979.0*a-15072.0))/2721600.0;
  Bjk2(3)=(-am3*am4*am5*(385.0*a7+19250.0*a6+79453.0*a5-704902.0*a4...
          -3777533.0*a3+4554230.0*a2+45888543.0*a+59417694.0))/359251200.0;
  Bjk2(4)=(-am4*am5*(245245.0*a8+7690683.0*a7-5210205.0*a6-602533113.0*a5...
          -519561855.0*a4+16275192897.0*a3+24955509665.0*a2...
          -154166970627.0*a-347566429890.0))/196151155200.0;
  Bjk2(5)=(-am5*(3458455.0*a9+77471394.0*a8-620586018.0*a7...
          -9039343206.0*a6+41667553068.0*a5+383952234678.0*a4...
          -1196935166542.0*a3-7395850923714.0*a2+11742903902637.0*a...
          +59955956368848.0))/2942267328000.0;
  Bjk2(6)=(-214158252906234.0*a-9501646468496523.0*a2+475439693396416.0*a4...
          +236409803594728.0*a3-10582323699594.0*a6-22854164497500.0*a5...
          +100641124890.0*a8+607327877352.0*a7-4714068346.0*a9...
          -312755443.0*a10+75469737547052334.0)/300111267456000.0;
  Bjk2(7)=(-2701343906846241552.0*a-134350781833811742167.0*a2+...
          5440372328406542590.0*a4+2923278488843321280.0*a3...
          -99670448599624206.0*a6-226809373921887456.0*a5+793705003802735.0*a8...
          +4904770618480320.0*a7-29978693672592.0*a9-2177543340427.0*a10...
          +1327066067283129987075.0)/2394887914298880000.0;
  Bjk2(8)=(-6684328630329417936000.0*a-369854786114706550342611.0*a2...
          +12436150877641001230790.0*a4+7131794575657811910400.0*a3...
          -191869002087510426918.0*a6-455652316662808742400.0*a5...
          +1302970853467806435.0*a8+8226936534717753600.0*a7...
          -40565200302985600.0*a9-3131792641633271.0*a10+4419733926568641189935175.0)...
          /3951565058593152000000.0;
  Bjk2(9)=(-165815268274441309847220.0*a-10138339463494165779831309.0*a2...
          +288826867115705833201890.0*a4+175073836457856071689040.0*a3...
          -3820505564917696342122.0*a6-9402559263706914223800.0*a5...
          +22465824788903821785.0*a8+144578051468088225360.0*a7...
          -586971175935843380.0*a9-47314762565848569.0*a10...
          +143492068729352113945996725.0)/68164497260731872000000.0;
  Bjk2(10)=(-1258227960517684445105653200.0*a-84494891726510581009943227291.0*a2...
          +2072778593585771158601534790.0*a4+1317933742764919091890478400.0*a3...
          -23849231739701706559915158.0*a6-60507999757433190391884000.0*a5...
          +122996275025513858322835.0*a8+804955137195113886945600.0*a7...
          -2737626996570279886800.0*a9-227804919129481044351.0*a10...
          +1392698575910161935784497410775.0)/372178155043596021120000000.0;
  Bjk2(11)=(-63742587747387860392488468.0*a-4675845192181255374081040599.0*a2...
          +100095402046473742700350848.0*a4+66352664923190434889975872.0*a3...
          -1013783492399359941969570.0*a6-2640776365864492411039176.0*a5...
          +4634975966788552567722.0*a8+30788197190590130434848.0*a7...
          -89007128672216883076.0*a9-7588177968141835311.0*a10...
          +88526783793340683958581840510.0)/13956680814134850792000000.0;
  Bjk2(12)=(-292607967631747686550060981680.0*a-23331618356154312021335916423333.0*a2...
          +440720187966181571495121034090.0*a4+303078871804544565274443060800.0*a3...
          -3968664889119690036336089034.0*a6-10579897848254251998941204640.0*a5...
          +16233124113342723195004725.0*a8+109265561631289583218939200.0*a7...
          -271886173916308659813680.0*a9-23623836628963135686433.0*a10...
          +501620047131007270502491621459185.0)/48569249233189280756160000000.0; 
  xx=1.0;
  Ak1=0.0;
  for j=1:17
    Ak1=Ak1+Ajk1(j)*xx;
    xx=xx*x;
  end
  xx=1.0;
  Ak2=0.0;
  for j=1:13
    Ak2=Ak2+Ajk2(j)*xx;
    xx=xx*x;
  end
  xx=x;
  Bk0=0.0;
  for j=1:20
    Bk0=Bk0+Bjk0(j)*xx;
    xx=xx*x;
  end
  xx=x;
  Bk1=0.0;
  for j=1:16
    Bk1=Bk1+Bjk1(j)*xx;
    xx=xx*x;
  end 
  xx=x;
  Bk2=0.0;
  for j=1:12
    Bk2=Bk2+Bjk2(j)*xx;
    xx=xx*x;
  end
  xx=1.0;
  Akp1=0.0;
  for j=1:16
    Akp1=Akp1+j*Ajk1(j+1)*xx;
    xx=xx*x;
  end
  xx=1.0;
  Akp2=0.0;
  for j=1:12
    Akp2=Akp2+j*Ajk2(j+1)*xx;
    xx=xx*x;
  end
  xx=1;
  Bkp0=0.0;
  for j=1:19
    Bkp0=Bkp0+j*Bjk0(j)*xx;
    xx=xx*x;
  end
  xx=1;
  Bkp1=0.0;
  for j=1:15
    Bkp1=Bkp1+j*Bjk1(j)*xx;
    xx=xx*x;
  end 
end
ac0=1.0;
ac1=Ak1/nu2;
ac1d=Akp1/nu2; 
ac2=Ak2/nu4;
ac2d=Akp2/nu4;
bc0=Bk0/nu;
bc1=Bk1/nu3;
bc0d=Bkp0/nu;
bc1d=Bkp1/nu3;
Sa= ac0+ac1+ac2;
Sb= bc0+bc1;
Sad=ac1d+ac2d;
Sbd=bc0d+bc1d;
phi=0.5/b*sqrt((1.0-x)/x);
nx=sqrt(b)/(1.0-x)^0.25;
ff=phi*0.5+0.25/(1.0-x);
fac1=ff+a*phi;
fac2=ff-(a+2.0)*phi;
Ag=fac1*Sa+Sad-2.0*nu*phi*Sb;
Bg=fac2*Sb+Sbd+2.0*nu*b*b*phi*Sa; 
w= 2.0*nu*b;
if (i>0)&&(i<10)
  u=jzer;
  h=4*nu^2*(zper/jzer)*1/(1+sqrt(1+zper/zeta0));
  wn=-h*(2.0*u+h)/(2.0*u); 
  w2=wn*wn; 
  v=2.0*wn/u;
  fk(1)= 0.0;   
  if a>5 
    j1=besselj(a+1,u);
  else
    [j1,~,~,~,~]=bessJY(a+1, u);
  end
  fk(2)=wn*j1; 
  S=fk(2); 
  kk= 1; tt= 1.0;
  while ((abs(tt)>1.0e-20)&&(kk < 20))
    fk(kk+2)=(kk*(a+kk)*v*fk(kk+1)-w2*fk(kk))/(kk*(kk+1)); 
    S= S+fk(kk+2);
    tt= fk(kk+2)/fk(2); 
    kk= kk+1;
  end  
  j0=(1.0+h/u)^a*S;
  if a>5
    j1=besselj(a+1,w);
  else
    [j1,~,~,~,~]=bessJY(a+1, w);
  end
else
  j0=besselj(a,w);
  j1=besselj(a+1,w);
end
expa=sqrt(x)*nx*(Ag*j0-(1.0/b)*Bg*j1);
end

function expay=expandAiry(n,alpha,xx,nc,zeta,zper,azer)
%------------------------------------------------------
% This is the Airy expansion for the normalized
% derivative of the Laguerre polynomials.
% Few terms are used in the expansion.
%------------------------------------------------------
fa=[.701210822720691362490691656032;
    -.803111369654863963634309928051;
     .865204025894151930842956658786;
    -.910850737049601803073652644092;
     .947335709441567765594931000990;
    -.977922808569498610951596048427;
     1.00437012266031196849779945681;
    -1.02773868882078617672330501492;
     1.04872064858818954795581953684;
    -1.06779385915742783465142457418;
     1.08530283135070003206714380883;
    -1.10150457027749681179755325019;
     1.11659617793265608454519281725;
    -1.13073231049318789017561655303;
     1.14403667327355267721472491904;
    -1.15660984911656546389019188625;
     1.16853478448752481831746911777;
    -1.17988072987014557291785268507;
     1.19070613115877665284431455226;
    -1.20106079151982328001598528695];
mu= (alpha-1)/2; kappa= n+(alpha+1)/2; 
nu= 4*kappa;
nu13=nu^(1/3);
nu132=nu13*nu13;
x= xx/nu; w=sqrt(x); xi= x-1;
[psi,St]= zetaxderN(x,zeta); 
rho=2^(1/6)*psi; 
dxdzeta=2*w*psi^2; 
w2=w*w;
rho2=rho*rho;
rho4=rho2*rho2;
rho6=rho4*rho2;
if abs(xi) < 0.05
  xi2=xi*xi;
  xi3=xi2*xi;
  xi4=xi3*xi;
  mu2=mu*mu;
  St2=St*St;
  St3=St2*St; 
  phi=nu*dxdzeta/2-2^(2/3)*(16*St3*mu2*xi4+32*St3*mu*xi4+8*St3*mu*xi3+...
        16*St3*xi4+48*St2*mu2*xi3+8*St3*xi3+96*St2*mu*xi3+St3*xi2+...
        24*St2*mu*xi2+48*St2*xi3+48*St*mu2*xi2+24*St2*xi2+...
        96*St*mu*xi2+3*St2*xi+24*St*mu*xi+48*St*xi2+16*mu2*xi+24*St*xi+...
        32*mu*xi+3*St+8*mu+16*xi+7)/(4*w*rho4*(rho6*(4*mu*w2+4*w2-4*mu-3)+w));
else 
  phi= nu*dxdzeta/2-((4*mu*w2+4*w2-4*mu-3)*rho6-w)/(4*w*zeta);
end
if abs(x-1)>0.2
  [Czeta, Dzeta]=CD(x,zeta,rho,phi,mu,nu); 
else
  [Czeta, Dzeta]=CDzetasmall(mu,zeta,phi,nu);
end
x=azer;
d=zper*nu132;
if nc<20
  Fa=fa(nc);
else
  Fa=airy(1,x); 
end
ai=Fa*d*(1+1/6*x*d^2+1/12*d^3+1/120*x^2*d^4+1/120*x*d^5+...
          1/5040*(x^3+10)*d^6+1/3360*x^2*d^7+1/362880*(x^4+52*x)*d^8);
aip=Fa*(1+1/2*x*d^2+1/3*d^3+1/24*x^2*d^4+1/20*x*d^5+...
      1/720*(x^3+10)*d^6+1/420*x^2*d^7+1/40320*(x^4+52*x)*d^8);
A1=ai;
A1d=aip;
frontN=nu13/(psi*sqrt(2));
expay=frontN*(A1*Czeta/nu132+A1d*Dzeta);
end

function [psi,St]=zetaxderN(x,z) 
%Outputs psi, chi and St; S=rho^4=1+xi*St;
xi= x-1; c= 2^(-2/3); St=0;
if abs(xi) < 0.1
  st= Stsum(xi); 
  St= st; 
  S=1+xi*st; 
  p=(c*S)^(1/4); 
else
  p=(z/xi)^(1/4); 
end
psi=p; 
end

function St=Stsum(xi) 
sk(1)= -0.2;
sk(2)=0.0971428571428571428571428571429;
sk(3)=-0.0600634920634920634920634920635;
sk(4)=0.0418110904968047825190682333539;
sk(5)=-0.0312522626579769436912294055151;
sk(6)=0.0244995175507284350821765787752;
sk(7)=-0.0198733622427784892770887168646;
sk(8)=0.0165407885939447436007782634472;
sk(9)=-0.0140462026526526167320993137196;
sk(10)=0.0121214985488451835651775730515;
sk(11)=-0.0105996399540933268435752107065;
sk(12)=0.00937168435271560853019469081485;
d= 1; 
term= sk(1); 
St= term; xk= 1; k= 1; 
while abs(d)> 1e-16 && k < 12 
  xk= xk*xi; 
  term= xk*sk(k+1); St= St+term; d= abs(term/St); k= k+1;
end  
end

function [Czeta, Dzeta]=CD(x, zeta, rho, phi, mu, nu) 
c=2^(1/3); c2= c*c; w=sqrt(x); eta= c2*zeta; 
alphaj(1)= 1; alphad(1)= 0;
eta2=eta*eta;
eta3=eta2*eta;
eta4=eta3*eta;
eta5=eta4*eta;
eta6=eta5*eta;
eta7=eta6*eta;
eta8=eta7*eta;
w2=w*w;
w3=w2*w;
w4=w3*w;
w5=w4*w;
w6=w5*w;
w7=w6*w;
w8=w7*w;
w9=w8*w;
w10=w9*w;
w11=w10*w;
w12=w11*w;
w13=w12*w;
w14=w13*w;
w15=w14*w;
w16=w15*w;
w17=w16*w;
w18=w17*w;
w19=w18*w;
w20=w19*w;
mu2=mu*mu;
mu3=mu2*mu;
mu4=mu3*mu;
mu5=mu4*mu;
mu6=mu5*mu;
mu7=mu6*mu;
mu8=mu7*mu;
mu9=mu8*mu;
mu10=mu9*mu;
rho2=rho*rho;
rho4=rho2*rho2;
rho6=rho4*rho2;
rho8=rho6*rho2;
rho10=rho8*rho2;
rho12=rho10*rho2;
rho14=rho12*rho2;
rho16=rho14*rho2;
rho18=rho16*rho2;
rho20=rho18*rho2;
rho22=rho20*rho2;
rho24=rho22*rho2;
rho26=rho24*rho2;
rho28=rho26*rho2;
rho30=rho28*rho2;
betaj(2)= c/24*(48*mu2*rho6*w4+48*mu*rho6*w4-96*mu2*rho6*w2+...
         8*rho6*w4-96*mu*rho6*w2+48*mu2*rho6-12*rho6*w2+...
         48*mu*rho6+9*rho6-5*w)/w/eta2;
betad(2)= 1/24*(48*mu2*rho12*w4+48*mu*rho12*w4-96*mu2*rho12*w2-...
         96*mu*rho12*w2+48*mu2*rho12-24*rho12*w2-48*mu2*rho6*w5+...
         48*mu*rho12-48*mu*rho6*w5+9*rho12+96*mu2*rho6*w3-8*rho6*w5+...
         96*mu*rho6*w3-48*mu2*rho6*w+12*rho6*w3-48*mu*rho6*w-...
         9*rho6*w+20*w2)/w2/eta3;
alphaj(3)= 1/1152*(2304*mu4*rho12*w8+1536*mu3*rho12*w8-...
         9216*mu4*rho12*w6-1536*mu2*rho12*w8-9216*mu3*rho12*w6-...
         768*mu*rho12*w8+13824*mu4*rho12*w4+1920*mu2*rho12*w6+...
         64*rho12*w8+18432*mu3*rho12*w4+1920*mu*rho12*w6-...
         9216*mu4*rho12*w2+2784*mu2*rho12*w4-192*rho12*w6-...
         15360*mu3*rho12*w2-1824*mu*rho12*w4+2304*mu4*rho12-...
         5184*mu2*rho12*w2+288*rho12*w4+4608*mu3*rho12+...
         960*mu*rho12*w2+2016*mu2*rho12+360*rho12*w2+...
         672*mu2*rho6*w5-288*mu*rho12+672*mu*rho6*w5-...
         135*rho12-1344*mu2*rho6*w3+112*rho6*w5-...
         1344*mu*rho6*w3+672*mu2*rho6*w-168*rho6*w3+...
         672*mu*rho6*w+126*rho6*w-455*w2)/w2/eta3;
alphad(3)= c2/384*(768*mu4*rho18*w8+1536*mu3*rho18*w8-...
         3072*mu4*rho18*w6+896*mu2*rho18*w8-6144*mu3*rho18*w6+...
         128*mu*rho18*w8+4608*mu4*rho18*w4-...
         3136*mu2*rho18*w6+9216*mu3*rho18*w4-...
         64*mu*rho18*w6-3072*mu4*rho18*w2+...
         4256*mu2*rho18*w4-64*rho18*w6-...
         6144*mu3*rho18*w2-352*mu*rho18*w4+768*mu4*rho18-...
         2688*mu2*rho18*w2-456*rho18*w4+1536*mu3*rho18+...
         384*mu*rho18*w2+672*mu2*rho18+180*rho18*w2+...
         112*mu2*rho12*w5-96*mu*rho18+112*mu*rho12*w5-...
         45*rho18-224*mu2*rho12*w3-224*mu*rho12*w3+...
         112*mu2*rho12*w-56*rho12*w3-336*mu2*rho6*w6+...
         112*mu*rho12*w-336*mu*rho6*w6+21*rho12*w+672*mu2*rho6*w4-...
         56*rho6*w6+672*mu*rho6*w4-336*mu2*rho6*w2+84*rho6*w4-...
         336*mu*rho6*w2-63*rho6*w2+455*w3)/eta4/w3;
betaj(4)= c/414720*(552960*mu6*rho18*w12-552960*mu5*rho18*w12-...
         3317760*mu6*rho18*w10-1382400*mu4*rho18*w12+...
         1105920*mu5*rho18*w10+737280*mu3*rho18*w12+...
         8294400*mu6*rho18*w8+6220800*mu4*rho18*w10+...
         875520*mu2*rho18*w12+2764800*mu5*rho18*w8-...
         2488320*mu3*rho18*w10-138240*mu*rho18*w12-...
         11059200*mu6*rho18*w6-10195200*mu4*rho18*w8-...
         3686400*mu2*rho18*w10-71168*rho18*w12-...
         11059200*mu5*rho18*w6+1313280*mu3*rho18*w8+...
         599040*mu*rho18*w10+8294400*mu6*rho18*w4+...
         6220800*mu4*rho18*w6+4780800*mu2*rho18*w8+...
         320256*rho18*w10+13824000*mu5*rho18*w4+...
         4654080*mu3*rho18*w6-1198080*mu*rho18*w8-...
         3317760*mu6*rho18*w2+1036800*mu4*rho18*w4-...
         570240*mu2*rho18*w6-554688*rho18*w8-7741440*mu5*rho18*w2-...
         172800*mu4*rho12*w9-8017920*mu3*rho18*w4+...
         996480*mu*rho18*w6+552960*mu6*rho18-2764800*mu4*rho18*w2-...
         115200*mu3*rho12*w9-3570480*mu2*rho18*w4+518400*rho18*w6+...
         1658880*mu5*rho18+691200*mu4*rho12*w7+4838400*mu3*rho18*w2+...
         115200*mu2*rho12*w9-45360*mu*rho18*w4+...
         864000*mu4*rho18+691200*mu3*rho12*w7+...
         2907360*mu2*rho18*w2+57600*mu*rho12*w9+340200*rho18*w4-...
         1036800*mu4*rho12*w5-1036800*mu3*rho18-...
         144000*mu2*rho12*w7-272160*mu*rho18*w2-...
         4800*rho12*w9-1382400*mu3*rho12*w5-736560*mu2*rho18-...
         144000*mu*rho12*w7-170100*rho18*w2+691200*mu4*rho12*w3-...
         208800*mu2*rho12*w5+58320*mu*rho18+...
         14400*rho12*w7+1152000*mu3*rho12*w3+136800*mu*rho12*w5+...
         42525*rho18-172800*mu4*rho12*w+388800*mu2*rho12*w3-...
         21600*rho12*w5-345600*mu3*rho12*w-72000*mu*rho12*w3-...
         151200*mu2*rho12*w-27000*rho12*w3+277200*mu2*rho6*w6+...
         21600*mu*rho12*w+277200*mu*rho6*w6+10125*rho12*w-...
         554400*mu2*rho6*w4+46200*rho6*w6-554400*mu*rho6*w4+...
         277200*mu2*rho6*w2-69300*rho6*w4+277200*mu*rho6*w2+...
         51975*rho6*w2-425425*w3)/w3/eta5;
betad(4)= 1/414720*(1658880*mu6*rho24*w12+2764800*mu5*rho24*w12-...
         9953280*mu6*rho24*w10-18800640*mu5*rho24*w10-...
         1658880*mu3*rho24*w12+24883200*mu6*rho24*w8-...
         2764800*mu4*rho24*w10-506880*mu2*rho24*w12-...
         552960*mu6*rho18*w13+52531200*mu5*rho24*w8+...
         12165120*mu3*rho24*w10+46080*mu*rho24*w12-...
         33177600*mu6*rho24*w6+552960*mu5*rho18*w13+...
         13651200*mu4*rho24*w8+6681600*mu2*rho24*w10+...
         3317760*mu6*rho18*w11-77414400*mu5*rho24*w6+...
         1382400*mu4*rho18*w13-34490880*mu3*rho24*w8+...
         599040*mu*rho24*w10+24883200*mu6*rho24*w4-...
         1105920*mu5*rho18*w11-26956800*mu4*rho24*w6-...
         737280*mu3*rho18*w13-20482560*mu2*rho24*w8-...
         23040*rho24*w10-8294400*mu6*rho18*w9+...
         63590400*mu5*rho24*w4-6220800*mu4*rho18*w11+...
         50181120*mu3*rho24*w6-875520*mu2*rho18*w13+...
         11520*mu*rho24*w8-9953280*mu6*rho24*w2-...
         2764800*mu5*rho18*w9+26611200*mu4*rho24*w4+...
         2488320*mu3*rho18*w11+30274560*mu2*rho24*w6+...
         138240*mu*rho18*w13-336960*rho24*w8+11059200*mu6*rho18*w7-...
         27648000*mu5*rho24*w2+9849600*mu4*rho18*w9-...
         40366080*mu3*rho24*w4+3686400*mu2*rho18*w11-...
         2626560*mu*rho24*w6+71168*rho18*w13+1658880*mu6*rho24+...
         11059200*mu5*rho18*w7-13132800*mu4*rho24*w2-...
         2004480*mu3*rho18*w9-25503120*mu2*rho24*w4-...
         599040*mu*rho18*w11-4276800*rho24*w6-...
         8294400*mu6*rho18*w5+4976640*mu5*rho24-...
         4838400*mu4*rho18*w7+17280000*mu3*rho24*w2-...
         5184000*mu2*rho18*w9+2766960*mu*rho24*w4-...
         320256*rho18*w11-13824000*mu5*rho18*w5+...
         2592000*mu4*rho24-1889280*mu3*rho18*w7+...
         11746080*mu2*rho24*w2+1140480*mu*rho18*w9+...
         1360800*rho24*w4+3317760*mu6*rho18*w3-...
         3110400*mu4*rho18*w5-3110400*mu3*rho24+...
         1981440*mu2*rho18*w7-972000*mu*rho24*w2+...
         554688*rho18*w9+7741440*mu5*rho18*w3+...
         691200*mu4*rho12*w10+3870720*mu3*rho18*w5-...
         2209680*mu2*rho24-967680*mu*rho18*w7-680400*rho24*w2-...
         552960*mu6*rho18*w+4147200*mu4*rho18*w3+...
         460800*mu3*rho12*w10+1655280*mu2*rho18*w5+...
         174960*mu*rho24-489600*rho18*w7-1658880*mu5*rho18*w-...
         2764800*mu4*rho12*w8-2073600*mu3*rho18*w3-...
         460800*mu2*rho12*w10+203760*mu*rho18*w5+...
         127575*rho24-1209600*mu4*rho18*w-2764800*mu3*rho12*w8-...
         1697760*mu2*rho18*w3-230400*mu*rho12*w10-...
         135000*rho18*w5+4147200*mu4*rho12*w6+...
         345600*mu3*rho18*w+576000*mu2*rho12*w8+...
         99360*mu*rho18*w3+19200*rho12*w10+5529600*mu3*rho12*w6+...
         434160*mu2*rho18*w+576000*mu*rho12*w8+89100*rho18*w3-...
         2764800*mu4*rho12*w4+1112400*mu2*rho12*w6-...
         15120*mu*rho18*w-57600*rho12*w8-4608000*mu3*rho12*w4-...
         270000*mu*rho12*w6-22275*rho18*w+691200*mu4*rho12*w2-...
         2109600*mu2*rho12*w4+86400*rho12*w6+...
         1382400*mu3*rho12*w2-266400*mu*rho12*w4+...
         882000*mu2*rho12*w2-30600*rho12*w4-1940400*mu2*rho6*w7+...
         190800*mu*rho12*w2-1940400*mu*rho6*w7+11475*rho12*w2+...
         3880800*mu2*rho6*w5-323400*rho6*w7+3880800*mu*rho6*w5-...
         1940400*mu2*rho6*w3+485100*rho6*w5-1940400*mu*rho6*w3-...
         363825*rho6*w3+4254250*w4)/eta6/w4; 
alphaj(5)= 1/39813120*(26542080*mu8*rho24*w16-...
          106168320*mu7*rho24*w16-212336640*mu8*rho24*w14+...
          637009920*mu7*rho24*w14+322043904*mu5*rho24*w16+...
          743178240*mu8*rho24*w12+185794560*mu6*rho24*w14-...
          92897280*mu4*rho24*w16-1486356480*mu7*rho24*w12-...
          1870331904*mu5*rho24*w14-297861120*mu3*rho24*w16-...
          1486356480*mu8*rho24*w10-1068318720*mu6*rho24*w12+...
          402554880*mu4*rho24*w14+52690944*mu2*rho24*w16+...
          1486356480*mu7*rho24*w10+4288757760*mu5*rho24*w12+...
          1716387840*mu3*rho24*w14+68321280*mu*rho24*w16+...
          1857945600*mu8*rho24*w8+2508226560*mu6*rho24*w10-...
          588349440*mu4*rho24*w12-296042496*mu2*rho24*w14-...
          2338816*rho24*w16-4428103680*mu5*rho24*w10-...
          3974676480*mu3*rho24*w12-403095552*mu*rho24*w14-...
          1486356480*mu8*rho24*w6-3019161600*mu6*rho24*w8+...
          383201280*mu4*rho24*w10+721219584*mu2*rho24*w12+...
          14032896*rho24*w14-1486356480*mu7*rho24*w6+...
          15482880*mu6*rho18*w13+727695360*mu5*rho24*w8+...
          4441743360*mu3*rho24*w10+980004864*mu*rho24*w12+...
          743178240*mu8*rho24*w4+1857945600*mu6*rho24*w6-...
          15482880*mu5*rho18*w13-650764800*mu4*rho24*w8-...
          1192513536*mu2*rho24*w10-36790272*rho24*w12+...
          1486356480*mu7*rho24*w4-92897280*mu6*rho18*w11+...
          3022258176*mu5*rho24*w6-38707200*mu4*rho18*w13-...
          1850895360*mu3*rho24*w8-1287438336*mu*rho24*w10-...
          212336640*mu8*rho24*w2-418037760*mu6*rho24*w4+...
          30965760*mu5*rho18*w11+1650862080*mu4*rho24*w6+...
          20643840*mu3*rho18*w13+1568415744*mu2*rho24*w8+...
          55710720*rho24*w10-637009920*mu7*rho24*w2+...
          232243200*mu6*rho18*w9-3223535616*mu5*rho24*w4+...
          174182400*mu4*rho18*w11-949155840*mu3*rho24*w6+...
          24514560*mu2*rho18*w13+879634944*mu*rho24*w8+...
          26542080*mu8*rho24-92897280*mu6*rho24*w2+...
          77414400*mu5*rho18*w9-1907297280*mu4*rho24*w4-...
          69672960*mu3*rho18*w11-1623801600*mu2*rho24*w6-...
          3870720*mu*rho18*w13-32876928*rho24*w8+...
          106168320*mu7*rho24-309657600*mu6*rho18*w7+...
          1393459200*mu5*rho24*w2-285465600*mu4*rho18*w9+...
          1451520000*mu3*rho24*w4-103219200*mu2*rho18*w11-...
          188096256*mu*rho24*w6-1992704*rho18*w13+...
          46448640*mu6*rho24-309657600*mu5*rho18*w7+...
          1004451840*mu4*rho24*w2+36771840*mu3*rho18*w9+...
          1218006720*mu2*rho24*w4+16773120*mu*rho18*w11+...
          231880320*rho24*w6+232243200*mu6*rho18*w5-...
          232243200*mu5*rho24+174182400*mu4*rho18*w7-...
          644474880*mu3*rho24*w2+133862400*mu2*rho18*w9-...
          78490944*mu*rho24*w4+8967168*rho18*w11+...
          387072000*mu5*rho18*w5-201761280*mu4*rho24+...
          130314240*mu3*rho18*w7-552251520*mu2*rho24*w2-...
          33546240*mu*rho18*w9-68584320*rho24*w4-...
          92897280*mu6*rho18*w3+29030400*mu4*rho18*w5+...
          107412480*mu3*rho24-15966720*mu2*rho18*w7+...
          34992000*mu*rho24*w2-15531264*rho18*w9-...
          216760320*mu5*rho18*w3-31449600*mu4*rho12*w10-...
          224501760*mu3*rho18*w5+104276160*mu2*rho24+...
          27901440*mu*rho18*w7+30618000*rho24*w2+...
          15482880*mu6*rho18*w-77414400*mu4*rho18*w3-...
          20966400*mu3*rho12*w10-99973440*mu2*rho18*w5-...
          5832000*mu*rho24+14515200*rho18*w7+46448640*mu5*rho18*w+...
          125798400*mu4*rho12*w8+135475200*mu3*rho18*w3+...
          20966400*mu2*rho12*w10-1270080*mu*rho18*w5-...
          5740875*rho24+24192000*mu4*rho18*w+...
          125798400*mu3*rho12*w8+81406080*mu2*rho18*w3+...
          10483200*mu*rho12*w10+9525600*rho18*w5-...
          188697600*mu4*rho12*w6-29030400*mu3*rho18*w-...
          26208000*mu2*rho12*w8-7620480*mu*rho18*w3-873600*rho12*w10-...
          251596800*mu3*rho12*w6-20623680*mu2*rho18*w-...
          26208000*mu*rho12*w8-4762800*rho18*w3+...
          125798400*mu4*rho12*w4-38001600*mu2*rho12*w6+...
          1632960*mu*rho18*w+2620800*rho12*w8+209664000*mu3*rho12*w4+...
          24897600*mu*rho12*w6+1190700*rho18*w-31449600*mu4*rho12*w2+...
          70761600*mu2*rho12*w4-3931200*rho12*w6-62899200*mu3*rho12*w2-...
          13104000*mu*rho12*w4-27518400*mu2*rho12*w2-...
          4914000*rho12*w4+91291200*mu2*rho6*w7+...
          3931200*mu*rho12*w2+91291200*mu*rho6*w7+...
          1842750*rho12*w2-182582400*mu2*rho6*w5+15215200*rho6*w7-...
          182582400*mu*rho6*w5+91291200*mu2*rho6*w3-22822800*rho6*w5+...
          91291200*mu*rho6*w3+17117100*rho6*w3-202076875*w4)/w4/eta6;
alphad(5)= c2/6635520*(8847360*mu8*rho30*w16-70778880*mu8*rho30*w14-...
       30965760*mu6*rho30*w16-35389440*mu7*rho30*w14-...
       10321920*mu5*rho30*w16+247726080*mu8*rho30*w12+...
       201277440*mu6*rho30*w14+25804800*mu4*rho30*w16+...
       247726080*mu7*rho30*w12+129024000*mu5*rho30*w14+...
       11796480*mu3*rho30*w16-495452160*mu8*rho30*w10-...
       541900800*mu6*rho30*w12-139345920*mu4*rho30*w14-...
       3350528*mu2*rho30*w16-743178240*mu7*rho30*w10-...
       645120000*mu5*rho30*w12-105431040*mu3*rho30*w14-...
       1138688*mu*rho30*w16+619315200*mu8*rho30*w8+...
         758661120*mu6*rho30*w10+200632320*mu4*rho30*w12+...
         6295552*mu2*rho30*w14+1238630400*mu7*rho30*w8+...
         1728921600*mu5*rho30*w10+428912640*mu3*rho30*w12+...
         9244672*mu*rho30*w14-495452160*mu8*rho30*w6-...
         541900800*mu6*rho30*w8+242242560*mu4*rho30*w10+...
         115443712*mu2*rho30*w12+569344*rho30*w14-...
         1238630400*mu7*rho30*w6+3870720*mu6*rho24*w13-...
         2761113600*mu5*rho30*w8-986941440*mu3*rho30*w10-...
         9617408*mu*rho30*w12+247726080*mu8*rho30*w4+...
         108380160*mu6*rho30*w6+6451200*mu5*rho24*w13-...
         1158796800*mu4*rho30*w8-449353728*mu2*rho30*w10-...
         3328512*rho30*w12+743178240*mu7*rho30*w4-...
         23224320*mu6*rho24*w11+2719825920*mu5*rho30*w6+...
         1407928320*mu3*rho30*w8+57295872*mu*rho30*w10-...
         70778880*mu8*rho30*w2+108380160*mu6*rho30*w4-...
         43868160*mu5*rho24*w11+1632153600*mu4*rho30*w6-...
         3870720*mu3*rho24*w13+830362752*mu2*rho30*w8-...
         5937408*rho30*w10-247726080*mu7*rho30*w2+...
         58060800*mu6*rho24*w9-1625702400*mu5*rho30*w4-...
         6451200*mu4*rho24*w11-1293327360*mu3*rho30*w6-...
         1182720*mu2*rho24*w13-136464768*mu*rho30*w8+...
         8847360*mu8*rho30-77414400*mu6*rho30*w2-...
         3870720*mu6*rho18*w14+122572800*mu5*rho24*w9-...
         1171860480*mu4*rho30*w4+28385280*mu3*rho24*w11-...
         947373120*mu2*rho30*w6+107520*mu*rho24*w13-...
         182274624*rho30*w8+35389440*mu7*rho30-...
         77414400*mu6*rho24*w7+541900800*mu5*rho30*w2+...
         3870720*mu5*rho18*w14+31852800*mu4*rho24*w9+...
         751887360*mu3*rho30*w4+15590400*mu2*rho24*w11+...
         109840320*mu*rho30*w6+15482880*mu6*rho30+...
         23224320*mu6*rho18*w12-180633600*mu5*rho24*w7+...
         436423680*mu4*rho30*w2+9676800*mu4*rho18*w14-...
         80478720*mu3*rho24*w9+644293440*mu2*rho30*w4+...
         1397760*mu*rho24*w11+29937600*rho30*w6+...
         58060800*mu6*rho24*w5-77414400*mu5*rho30-...
         7741440*mu5*rho18*w12-62899200*mu4*rho24*w7-...
         250629120*mu3*rho30*w2-5160960*mu3*rho18*w14-...
         47792640*mu2*rho24*w9-40824000*mu*rho30*w4-...
         53760*rho24*w11-58060800*mu6*rho18*w10+...
         148377600*mu5*rho24*w5-67253760*mu4*rho30-...
         43545600*mu4*rho18*w12+117089280*mu3*rho24*w7-...
         231076800*mu2*rho30*w2-6128640*mu2*rho18*w14+...
         26880*mu*rho24*w9-35721000*rho30*w4-23224320*mu6*rho24*w3-...
         19353600*mu5*rho18*w10+62092800*mu4*rho24*w5+35804160*mu3*rho30+...
         17418240*mu3*rho18*w12+70640640*mu2*rho24*w7+13608000*mu*rho30*w2+...
         967680*mu*rho18*w14-786240*rho24*w9+77414400*mu6*rho18*w8-...
         64512000*mu5*rho24*w3+66124800*mu4*rho18*w10-...
         94187520*mu3*rho24*w5+34758720*mu2*rho30+...
         25804800*mu2*rho18*w12-6128640*mu*rho24*w7+...
         12757500*rho30*w2+498176*rho18*w14+3870720*mu6*rho24*w+...
         77414400*mu5*rho18*w8-30643200*mu4*rho24*w3-...
         19676160*mu3*rho18*w10-59507280*mu2*rho24*w5-...
         1944000*mu*rho30-4193280*mu*rho18*w12-9979200*rho24*w7-...
         58060800*mu6*rho18*w6+11612160*mu5*rho24*w-...
         22579200*mu4*rho18*w8+40320000*mu3*rho24*w3-...
         39580800*mu2*rho18*w10+6456240*mu*rho24*w5-...
         1913625*rho30-2241792*rho18*w12-96768000*mu5*rho18*w6+...
         6048000*mu4*rho24*w+9354240*mu3*rho18*w8+...
         27407520*mu2*rho24*w3+7512960*mu*rho18*w10+...
         3175200*rho24*w5+23224320*mu6*rho18*w4-38707200*mu4*rho18*w6-...
         7257600*mu3*rho24*w+25394880*mu2*rho18*w8-...
         2268000*mu*rho24*w3+3882816*rho18*w10+...
         54190080*mu5*rho18*w4+15724800*mu4*rho12*w11-...
         6773760*mu3*rho18*w6-5155920*mu2*rho24*w-6538560*mu*rho18*w8-...
         1587600*rho24*w3-3870720*mu6*rho18*w2+40320000*mu4*rho18*w4+...
         10483200*mu3*rho12*w11-4053840*mu2*rho18*w6+...
         408240*mu*rho24*w-3192000*rho18*w8-11612160*mu5*rho18*w2-...
         62899200*mu4*rho12*w9+8064000*mu3*rho18*w4-...
         10483200*mu2*rho12*w11+2719920*mu*rho18*w6+...
         297675*rho24*w-11289600*mu4*rho18*w2-62899200*mu3*rho12*w9-...
         2005920*mu2*rho18*w4-5241600*mu*rho12*w11+...
         730800*rho18*w6+94348800*mu4*rho12*w7-...
         3225600*mu3*rho18*w2+13104000*mu2*rho12*w9-...
         715680*mu*rho18*w4+436800*rho12*w11+125798400*mu3*rho12*w7+...
         569520*mu2*rho18*w2+13104000*mu*rho12*w9-37800*rho18*w4-...
         62899200*mu4*rho12*w5+26608400*mu2*rho12*w7+...
         246960*mu*rho18*w2-1310400*rho12*w9-104832000*mu3*rho12*w5-...
         4841200*mu*rho12*w7+9450*rho18*w2+15724800*mu4*rho12*w3-...
         50596000*mu2*rho12*w5+1965600*rho12*w7+31449600*mu3*rho12*w3-...
         8663200*mu*rho12*w5+21366800*mu2*rho12*w3-...
         1346800*rho12*w5-68468400*mu2*rho6*w8+5642000*mu*rho12*w3-...
         68468400*mu*rho6*w8+505050*rho12*w3+136936800*mu2*rho6*w6-...
         11411400*rho6*w8+136936800*mu*rho6*w6-68468400*mu2*rho6*w4+...
         17117100*rho6*w6-68468400*mu*rho6*w4-12837825*rho6*w4+...
         202076875*w5)/eta7/w5;
betaj(6)= c/6688604160*(1783627776*mu10*rho30*w20-14863564800*mu9*rho30*w20-...
           17836277760*mu10*rho30*w18+...
           31213486080*mu8*rho30*w20+124853944320*mu9*rho30*w18+...
           30916214784*mu7*rho30*w20+80263249920*mu10*rho30*w16-...
           216264867840*mu8*rho30*w18-136645705728*mu6*rho30*w20-...
           454825082880*mu9*rho30*w16-285974986752*mu7*rho30*w18+...
           3666345984*mu5*rho30*w20-214035333120*mu10*rho30*w14+...
           608105594880*mu8*rho30*w16+986346160128*mu6*rho30*w18+...
           183994417152*mu4*rho30*w20+927486443520*mu9*rho30*w14+...
           1120564150272*mu7*rho30*w16+38149816320*mu5*rho30*w18-...
           26005733376*mu3*rho30*w20+374561832960*mu10*rho30*w12-...
           824927846400*mu8*rho30*w14-3012621631488*mu6*rho30*w16-...
           1338769539072*mu4*rho30*w18-81131667456*mu2*rho30*w20-...
           1123685498880*mu9*rho30*w12-2386791235584*mu7*rho30*w14-...
           343695163392*mu5*rho30*w16+174712946688*mu3*rho30*w18+...
           5500895232*mu*rho30*w20-449474199552*mu10*rho30*w10+...
           358955089920*mu8*rho30*w12+4998232866816*mu6*rho30*w14+...
           4160590479360*mu4*rho30*w16+597402451968*mu2*rho30*w18+...
           5369987072*rho30*w20+749123665920*mu9*rho30*w10-...
           928972800*mu8*rho24*w17+2861236224000*mu7*rho30*w12+...
           978109267968*mu5*rho30*w14-513160445952*mu3*rho30*w16-...
           40863793152*mu*rho30*w18+374561832960*mu10*rho30*w8+...
           499415777280*mu8*rho30*w10+3715891200*mu7*rho24*w17-...
           4786555576320*mu6*rho30*w12-7167727042560*mu4*rho30*w14-...
           1892201299968*mu2*rho30*w16-40274903040*rho30*w18-...
           124853944320*mu9*rho30*w8+7431782400*mu8*rho24*w15-...
           1554431606784*mu7*rho30*w10-1166549852160*mu5*rho30*w12+...
           896106430464*mu3*rho30*w14+135252934656*mu*rho30*w16-...
           214035333120*mu10*rho30*w6-881780981760*mu8*rho30*w8-...
           22295347200*mu7*rho24*w15+2618356285440*mu6*rho30*w10-...
           11271536640*mu5*rho24*w17+7534535823360*mu4*rho30*w12+...
           3359949078528*mu2*rho30*w14+130795204608*rho30*w16-...
           214035333120*mu9*rho30*w6-26011238400*mu8*rho24*w13-...
           507739373568*mu7*rho30*w8-6502809600*mu6*rho24*w15-...
           10772987904*mu5*rho30*w10+3251404800*mu4*rho24*w17-...
           1141465006080*mu3*rho30*w12-263419183104*mu*rho30*w14+...
           80263249920*mu10*rho30*w4+593056235520*mu8*rho30*w6+...
           52022476800*mu7*rho24*w13-932101890048*mu6*rho30*w8+...
           65461616640*mu5*rho24*w15-5312621647872*mu4*rho30*w10+...
           10425139200*mu3*rho24*w17-3738668967936*mu2*rho30*w12-...
           239947628544*rho30*w14+187280916480*mu9*rho30*w4+...
           52022476800*mu8*rho24*w11+1448603025408*mu7*rho30*w6+...
           37391155200*mu6*rho24*w13+1800140267520*mu5*rho30*w8-...
           14089420800*mu4*rho24*w15+1284815056896*mu3*rho30*w10-...
           1844183040*mu2*rho24*w17+313292335104*mu*rho30*w12-...
           17836277760*mu10*rho30*w2-189510451200*mu8*rho30*w4-...
           52022476800*mu7*rho24*w11+589024493568*mu6*rho30*w6-...
           150106521600*mu5*rho24*w13+3234040653312*mu4*rho30*w8-...
           60073574400*mu3*rho24*w15+2821066665984*mu2*rho30*w10-...
           2391244800*mu*rho24*w17+271767481344*rho30*w12-...
           65399685120*mu9*rho30*w2-65028096000*mu8*rho24*w9-...
           1022910529536*mu7*rho30*w4-87787929600*mu6*rho24*w11-...
           2393275465728*mu5*rho30*w6+20592230400*mu4*rho24*w13-...
           1331985005568*mu3*rho30*w8+10361487360*mu2*rho24*w15-...
           291991246848*mu*rho30*w10+81858560*rho24*w17+1783627776*mu10*rho30+...
           20065812480*mu8*rho30*w2-528580878336*mu6*rho30*w4+...
           154983628800*mu5*rho24*w11-2245971732480*mu4*rho30*w6+...
           139113676800*mu3*rho24*w13-1714822147584*mu2*rho30*w8+...
           14108344320*mu*rho24*w15-180736012800*rho30*w10+...
           8918138880*mu9*rho30+52022476800*mu8*rho24*w7+...
           343348346880*mu7*rho30*w2+105670656000*mu6*rho24*w9+...
           1529753444352*mu5*rho30*w4-13412044800*mu4*rho24*w11+...
           1108853286912*mu3*rho30*w6-25242685440*mu2*rho24*w13+...
           244335522816*mu*rho30*w8-491151360*rho24*w15+1672151040*mu8*rho30+...
           52022476800*mu7*rho24*w7+248732467200*mu6*rho30*w2+...
           2980454400*mu6*rho18*w14-25469337600*mu5*rho24*w9+...
           1383539512320*mu4*rho30*w4-155461017600*mu3*rho24*w11+...
           1101821398272*mu2*rho30*w6-34300170240*mu*rho24*w13+...
           260780446080*rho30*w8-26011238400*mu8*rho24*w5-...
           46820229120*mu7*rho30-65028096000*mu6*rho24*w7-...
           504292884480*mu5*rho30*w2-2980454400*mu5*rho18*w14+...
           22776768000*mu4*rho24*w9-629975937024*mu3*rho30*w4+...
           41737973760*mu2*rho24*w11-126250451712*mu*rho30*w6+1287659520*rho24*w13-...
           52022476800*mu7*rho24*w5-44186591232*mu6*rho30-17882726400*mu6*rho18*w12-...
           105779036160*mu5*rho24*w7-511085998080*mu4*rho30*w2-...
           7451136000*mu4*rho18*w14+64781337600*mu3*rho24*w9-...
           647918765424*mu2*rho30*w4+45060341760*mu*rho24*w11-...
           43756796160*rho30*w6+7431782400*mu8*rho24*w3+...
           14631321600*mu6*rho24*w5+68767211520*mu5*rho30+5960908800*mu5*rho18*w12-...
           57780172800*mu4*rho24*w7+206226155520*mu3*rho30*w2+3973939200*mu3*rho18*w14-...
           54894551040*mu2*rho24*w9+33644773008*mu*rho30*w4-1949875200*rho24*w11+...
           22295347200*mu7*rho24*w3+44706816000*mu6*rho18*w10+...
           112823746560*mu5*rho24*w5+79475074560*mu4*rho30+33530112000*mu4*rho18*w12+...
           33220454400*mu3*rho24*w7+229003860960*mu2*rho30*w2+4719052800*mu2*rho18*w14-...
           30787223040*mu*rho24*w9+35222334840*rho30*w4-928972800*mu8*rho24*w+...
           3251404800*mu6*rho24*w3+14902272000*mu5*rho18*w10+66755404800*mu4*rho24*w5-...
           28121748480*mu3*rho30-13412044800*mu3*rho18*w12+56833056000*mu2*rho24*w7-...
           11002068000*mu*rho30*w2-745113600*mu*rho18*w14+1150692480*rho24*w9-...
           3715891200*mu7*rho24*w-59609088000*mu6*rho18*w8-48771072000*mu5*rho24*w3-...
           54952128000*mu4*rho18*w10-50803200000*mu3*rho24*w5-34500607344*mu2*rho30-...
           19869696000*mu2*rho18*w12+6583368960*mu*rho24*w7-12377326500*rho30*w2-...
           383595520*rho18*w14-1625702400*mu6*rho24*w-59609088000*mu5*rho18*w8-...
           35155814400*mu4*rho24*w3+7078579200*mu3*rho18*w10-42630235200*mu2*rho24*w5+...
           1500282000*mu*rho30+3228825600*mu*rho18*w12-8115811200*rho24*w7+...
           44706816000*mu6*rho18*w6+8128512000*mu5*rho24*w+33530112000*mu4*rho18*w8+...
           22556620800*mu3*rho24*w3+25768512000*mu2*rho18*w10+2747183040*mu*rho24*w5+...
           1856598975*rho30+1726179840*rho18*w12+74511360000*mu5*rho18*w6+...
           7061644800*mu4*rho24*w+25085491200*mu3*rho18*w8+19328803200*mu2*rho24*w3-...
           6457651200*mu*rho18*w10+2400451200*rho24*w5-17882726400*mu6*rho18*w4+...
           5588352000*mu4*rho18*w6-3759436800*mu3*rho24*w-3073593600*mu2*rho18*w8-...
           1224720000*mu*rho24*w3-2989768320*rho18*w10-41726361600*mu5*rho18*w4-...
           13722508800*mu4*rho12*w11-43216588800*mu3*rho18*w6-3649665600*mu2*rho24*w+...
           5371027200*mu*rho18*w8-1071630000*rho24*w3+2980454400*mu6*rho18*w2-...
           14902272000*mu4*rho18*w4-9148339200*mu3*rho12*w11-19244887200*mu2*rho18*w6+...
           204120000*mu*rho24*w+2794176000*rho18*w8+8941363200*mu5*rho18*w2+...
           54890035200*mu4*rho12*w9+26078976000*mu3*rho18*w4+9148339200*mu2*rho12*w11-...
           244490400*mu*rho18*w6+200930625*rho24*w+4656960000*mu4*rho18*w2+...
           54890035200*mu3*rho12*w9+15670670400*mu2*rho18*w4+4574169600*mu*rho12*w11+...
           1833678000*rho18*w6-82335052800*mu4*rho12*w7-5588352000*mu3*rho18*w2-...
           11435424000*mu2*rho12*w9-1466942400*mu*rho18*w4-381180800*rho12*w11-...
           109780070400*mu3*rho12*w7-3970058400*mu2*rho18*w2-11435424000*mu*rho12*w9-...
           916839000*rho18*w4+54890035200*mu4*rho12*w5-16581364800*mu2*rho12*w7+...
           314344800*mu*rho18*w2+1143542400*rho12*w9+91483392000*mu3*rho12*w5+...
           10863652800*mu*rho12*w7+229209750*rho18*w2-13722508800*mu4*rho12*w3+...
           30875644800*mu2*rho12*w5-1715313600*rho12*w7-27445017600*mu3*rho12*w3-...
           5717712000*mu*rho12*w5-12007195200*mu2*rho12*w3-2144142000*rho12*w5+...
           62466003600*mu2*rho6*w8+1715313600*mu*rho12*w3+62466003600*mu*rho6*w8+...
           804053250*rho12*w3-124932007200*mu2*rho6*w6+10411000600*rho6*w8-...
           124932007200*mu*rho6*w6+62466003600*mu2*rho6*w4-15616500900*rho6*w6+...
           62466003600*mu*rho6*w4+11712375675*rho6*w4-188699385875*w5)/w5/eta8;
deltaj(1)= 1; 
for j=1:2
  deltaj(2*j+1)= alphaj(2*j+1)+betad(2*j)+phi*betaj(2*j);
end
for j=0:2
  gammaj(2*j+1)= phi*alphaj(2*j+1)+alphad(2*j+1)+zeta*betaj(2*j+2);
end
nu2=nu*nu;
nu4=nu2*nu2;
Czeta= gammaj(1)+gammaj(3)/nu2+gammaj(5)/nu4;
Dzeta= 1+deltaj(3)/nu2+deltaj(5)/nu4;
end

function [Czeta,Dzeta]=CDzetasmall(mu, zeta, phi, nu) 
c=2^(1/3); c2= c*c; eta= c2*zeta; 
mu2=mu*mu;
mu3=mu2*mu;
mu4=mu3*mu;
mu5=mu4*mu;
mu6=mu5*mu;
mu7=mu6*mu;
mu8=mu7*mu;
mu9=mu8*mu;
mu10=mu9*mu;
mu11=mu10*mu;
mu12=mu11*mu;
alphaj(1)= 1; alphad(1)= 0;
pk(1)= 2/35*(35*mu2+35*mu+6);
pk(2)= -4/225*(45*mu2+45*mu+8);
pk(3)= 2/67375*(14245*mu2+14245*mu+2586);
pk(4)= -16/511875*(7475*mu2+7475*mu+1374);
pk(5)= 2/63669375*(4163985*mu2+4163985*mu+771202);
pk(6)= -16/2393015625*(11004865*mu2+11004865*mu+2047674);
pk(7)= 2/90819588234375*(1883436727865*mu2+1883436727865*mu+351459919266);
pk(8)= -16/3768999609375*(5512622805*mu2+5512622805*mu+1030528274);
pk(9)= 4/403931471120912109375*(1333975874919731225*mu2+...
    1333975874919731225*mu+249651721937533362);
pk(10)= -16/13534477597265625*(6309125960185*mu2+...
    6309125960185*mu+1181569359882);
pk(11)= 2/777568081907755810546875*(1637400663866207321235*mu2+...
    1637400663866207321235*mu+306785723279602794646);
pk(12)= -32/86889654364745654296875*(6457891490888933605*mu2+...
    6457891490888933605*mu+1210292208715940562);
pk(13)= 8/17425825574008095449527587890625*...
    (2925612960430620953527079185*mu2+...
     2925612960430620953527079185*mu+548392221696659008704815298);    
%-----------------------------------------------------------------
sumj=0; sumd=0;
for k=0:12
  sumj=sumj+pk(k+1)*eta^k;
  if k>0
    sumd=sumd+k*pk(k+1)*eta^(k-1);
  end
end   
betaj(1)= c*sumj; 
betad(1)= 2*sumd; 
%------------------------------------------------------------------
pk(1)= -8/225*(75*mu3+90*mu2+15*mu-4);
pk(2)= 2/9625*(9625*mu4+19250*mu3+8855*mu2-770*mu-456);
pk(3)= -8/73125*(14625*mu4+29250*mu3+13325*mu2-1300*mu-732);
pk(4)= 4/3898125*(1136025*mu4+2272050*mu3+1027935*mu2-108090*mu-58928);
pk(5)= -8/478603125*(48194575*mu4+96389150*mu3+43387995*mu2-...
       4806580*mu-2561268);
pk(6)= 2/12974226890625*(3489581870775*mu4+6979163741550*mu3+...
       3129460485305*mu2-360121385470*mu-188632934328);
pk(7)= -8/11306998828125*(495530490375*mu4+991060980750*mu3+...
       443059646715*mu2-52470843660*mu-27118413188);
pk(8)= 16/57704495874416015625*(809388388309626125*mu4+...
       1618776776619252250*mu3+721957140541275275*mu2-...
       87431247768350850*mu-44703172731409272);
pk(9)= -8/4511492532421875*(79887498358725*mu4+159774996717450*mu3+...
       71120140557865*mu2-8767357800860*mu-4443378245052);
pk(10)= 2/22216230911650166015625*(982250371883249243775*mu4+...
       1964500743766498487550*mu3+873058656552756230865*mu2-...
       109191715330493012910*mu-54935521928220690296);
pk(11)= -16/86889654364745654296875*(297031002014990294825*mu4+...
       594062004029980589650*mu3+263659894884414029365*mu2-...
       33371107130576265460*mu-16686197265655394364);
pk(12)= 16/2489403653429727921361083984375*(5223992045285729621007939375*mu4+...
       10447984090571459242015878750*mu3+4631850905951374081079056345*mu2-...
       592141139334355539928883030*mu-294534032435622901965330024);
%----------------------------------------------------------------------------
sumj=0; sumd=0;
for k=0:11
   sumj=sumj+pk(k+1)*eta^k;
   if k>0
     sumd=sumd+k*pk(k+1)*eta^(k-1);
   end
end   
alphaj(2)= sumj; 
alphad(2)= c2*sumd; 
%-------------------------------------------------------------------------
pk(1)=-16/511875*(170625*mu5+170625*mu4-141375*mu3-126425*mu2+...
       14950*mu+8688);
pk(2)= 4/9095625*(3031875*mu6+13946625*mu5+9442125*mu4-...
      9965725*mu3-7755720*mu2+737380*mu+479376);
pk(3)= -8/3350221875*(670044375*mu6+2482354875*mu5+...
      1491114625*mu4-1698931975*mu3-1266538080*mu2+111198020*mu+75800832);
pk(4)= 4/168496453125*(62584396875*mu6+213999410625*mu5+...
      121719346125*mu4-143397563325*mu3-104827721120*mu2+...
      8874174580*mu+6192836112);
pk(5)=-16/142468185234375*(10945174865625*mu6+35941336908750*mu5+...
      19845086467500*mu4-23777918037000*mu3-17198471585565*mu2+...
      1428370875810*mu+1009653820208);
pk(6)= 16/57704495874416015625*(3424632765256828125*mu6+...
      10981546760028219375*mu5+5955946877199694375*mu4-...
      7202543394041870875*mu3-5176406927902537600*mu2+...
      425169348567636400*mu+302813137571488968);
pk(7)=-8/115794974998828125*(10136887811386875*mu6+...
      32011584652845875*mu5+17162206852261625*mu4-20864048077090775*mu3-...
      14933522737672380*mu2+1218035350221020*mu+871620054681984);
pk(8)= 8/54530748601323134765625*(3404024538370182601875*mu6+...
      10637449017206666279625*mu5+5658394356399344230125*mu4-....
      6899940618261444587925*mu3-4925092492605983473440*mu2+...
      399818003218321666860*mu+287003404264197912736);
pk(9)= -32/2635652849063951513671875*(28583390534269001681250*mu6+...
      88651569130757420458125*mu5+46896117470091053061625*mu4-...
      57285917819800013463775*mu3-40811918023560062143715*mu2+...
      3301938669842585604810*mu+2375393479357511138544);
pk(9)= 16/497880730685945584272216796875*(7352521787433990308406890625*mu6+...
      22676467169773026316228396875*mu5+11947536030998989656664996875*mu4-...
      14608334734937277615555264375*mu3-10393178623660422610078848160*mu2+...
      838746759936808654319906840*mu+604339749046934963565997272);
pk(10)= -8/2968074564652142398333740234375*(58700619656498586018580453125*mu6+...
      180268634308869289136454125625*mu5+94694079499767280424623606875*mu4-...
      115834572331763193274117942125*mu3-82329601746125703033184980600*mu2+...
      6631035433034067547682895900*mu+4783533991943548150372243072);
%--------------------------------------------------------------------------------
sumj=0; sumd=0;
for k=0:10
   sumj=sumj+pk(k+1)*eta^k;
   if k>0
     sumd=sumd+k*pk(k+1)*eta^(k-1);
   end
end   
betaj(3)= c*sumj; 
betad(3)= 2*sumd; 
%--------------------------------------------------------------------------------
pk(1)= 8/27286875*(21223125*mu6+12733875*mu5-...
      40627125*mu4-21303975*mu3+16558920*mu2+5725020*mu-795376);
pk(2)= -16/36815625*(12271875*mu7+17180625*mu6-23071125*mu5-...
      33543125*mu4+8908850*mu3+14059340*mu2-412760*mu-725856);
pk(3)= 2/393158390625*(131052796875*mu8+1362949087500*mu7+...
      1415370206250*mu6-2695610417500*mu5-3275596767625*mu4+...
      1126709978800*mu3+1466998142260*mu2-56224271040*mu-77453205696);
pk(4)= -16/2907513984375*(193834265625*mu8+1340225493750*mu7+...
      1145775881250*mu6-2719430415000*mu5-2998815969375*mu4+...
      1176339008250*mu3+1395795548340*mu2-60544361160*mu-74660077088);
pk(5)= 8/177552294998203125*(26717392961634375*mu8+154547529919282500*mu7+...
      115479534411491250*mu6-318427703011225500*mu5-330965972852717125*mu4+...
      140302196403800200*mu3+157848317548455100*mu2-7342751242993600*mu-...
      8512260853803744);
pk(6)= -16/148879253569921875*(10782323930503125*mu8+...
      56476946377726875*mu7+38288524828640625*mu6-...
      117550328774830875*mu5-117508219696617750*mu4+...
      52376336966399400*mu3+56971081723406920*mu2-...
      2769243783362480*mu-3088710237636096);
pk(7)= 4/37752056723992939453125*(9577177709824959609375*mu8+...
      47132647454356374487500*mu7+29716180016874110471250*mu6-...
      98809918555838797345500*mu5-96129711748558045963125*mu4+...
      44351982263810521263600*mu3+47150340741151927799940*mu2-...
      2360724443035146488160*mu-2565537866016642960256);
pk(8)= -64/1129565506741693505859375*(14713571778946024359375*mu8+...
      69416805583224718368750*mu7+41398518010063170206250*mu6-...
      146310539463075534592500*mu5-139563643614019656656625*mu4+...
      66012429554847634602150*mu3+69040418971974025744880*mu2-...
      3529830528033254724520*mu-3766103580898169183568);
pk(8)= 8/497880730685945584272216796875*(40688471317969676839684921875*mu8+...
      186263885281661087812974562500*mu7+106350670861956136495535906250*mu6-...
      394226721567883700524265737500*mu5-370524077210401946659052465625*mu4+...
      178538458556977294785405165000*mu3+184482504838833984156347671180*mu2-...
      9578052462396831241597956320*mu-10081546996389309267947991456);
pk(9)= -16/11741833442579903993408203125*(363126915497588121248118750*mu8+...
      1625555621256883920514535625*mu7+896463290767620136317631875*mu6-...
      3451911550710911508202549875*mu5-3207558799813276079940817125*mu4+...
      1567775336702067754799679450*mu3+1605081237797893689873812700*mu2-...
      84306762998214299612919000*mu-87829880394169920974633888);
%----------------------------------------------------------------------------
sumj=0; sumd=0;
for k=0:9
   sumj=sumj+pk(k+1)*eta^k;
   if k>0 
     sumd=sumd+k*pk(k+1)*eta^(k-1);
   end
end   
alphaj(4)= sumj; 
alphad(4)= c2*sumd; 
%-----------------------------------------------------------------------------
pk(1)= 8/1179475171875*(1441580765625*mu8-1153264612500*mu7-...
       6342955368750*mu6+2921603685000*mu5+8814486305625*mu4-...
       1769408232900*mu3-3729423508580*mu2+184757354320*mu+...
       220572144768);
pk(2)= -32/20352597890625*(2261399765625*mu9+5879639390625*mu8-...
       14395424793750*mu7-29528855606250*mu6+23902858468125*mu5+...
       43370984530125*mu4-10913366682000*mu3-18132299387460*mu2+...
       734002169040*mu+1001217916672);
pk(3)= 4/80705588635546875*(5380372575703125*mu10+...
       112987824089765625*mu9+175451387611500000*mu8-...
       648029153565543750*mu7-1024661134417659375*mu6+...
       1012232467795565625*mu5+1568901782281727250*mu4-...
       436208996418079500*mu3-658378500755613400*mu2+...
       25711765393949600*mu+35694999027439872);
pk(4)= -8/386699359921875*(25779957328125*mu10+320408041078125*mu9+...
       364738655531250*mu8-1776937969023750*mu7-2457309697927875*mu6+...
       2713732749150525*mu5+3880826576524980*mu4-1144471080389220*mu3-...
       1637165504848480*mu2+64138245792320*mu+88233376902144);
pk(5)= 4/2516803781599529296875*(445833812740488046875*mu10+...
       4291616522401567734375*mu9+3883370299924803187500*mu8-...
       23430393266005951706250*mu7-29796696063616061435625*mu6+...
       35385236004372896478375*mu5+48169970712372089230650*mu4-...
       14769719582002404750500*mu3-20416321060304583330840*mu2+...
       809418022350627942560*mu+1098033457423386747136)*2^(1/3);
pk(6)= -64/1129565506741693505859375*(13722129118936128515625*mu10+...
       113302103181282249609375*mu9+85370384330007917765625*mu8-...
       613155871698239863743750*mu7-736130009256994505278125*mu6+...
       920019419771363697751875*mu5+1211554916626735705490375*mu4-...
       381821784176605712803100*mu3-515477533772623863483420*mu2+...
       20696019968261012195680*mu+27704388492183007120512);
pk(7)= 4/295829311162178006103515625*(56236784120195548791796875*mu10+...
       419303375892882812190234375*mu9+271511741415761798201250000*mu8-...
       2256563960629629478233656250*mu7-2598138811421976779062640625*mu6+...
       3371828681810937523370934375*mu5+4336298570827306762098778750*mu4-...
       1394464773881177819000372500*mu3-1850661683073204007269208680*mu2+...
       75143278675070284432836320*mu+99447588130389956452467456);
pk(8)= -16/16011591058063505445556640625*(688287657530915504640703125*mu10+...
       4774113894426504011837578125*mu9+2719709963874721582358343750*mu8-...
       25595409588591990540991893750*mu7-28553606363754593473257871875*mu6+...
       38135916506822987775968128125*mu5+48186510509260081628795979000*mu4-...
       15735301252420773425621980500*mu3-20616476467103406313725531600*mu2+...
       845105739570991107619790400*mu+1107888657721693330682327552);
pk(8)= 4/39190326086850859561998779296875*(5756927224384115371647821390625*mu10+...
       37851626026734629936511512953125*mu9+19321203822811836068961281193750*mu8-...
       202375404379489270602055596963750*mu7-220295515740197392609419213822375*mu6+...
       300902466834004206894680469914325*mu5+375088733510690726988054254503040*mu4-...
       12395686687375401599160131496660*mu3-160805414902102215846819030516880*mu2+...
       6644112308091519734890858341120*mu+8642250195587737285541332621824);
%------------------------------------------------------------------------------------
sumj=0; sumd=0;
for k=0:8
   sumj=sumj+pk(k+1)*eta^k;
   if k>0
     sumd=sumd+k*pk(k+1)*eta^(k-1);
   end
end   
betaj(5)= c*sumj; 
betad(5)= 2*sumd; 
%------------------------------------------------------------------------------------
pk(1)= -64/313116890625*(50253328125*mu9-90455990625*mu8-...
      256722716250*mu7+365844228750*mu6+491125123125*mu5-...
      448936826625*mu4-365735392200*mu3+...
      163724407380*mu2+71255476080*mu-8210027776);
pk(2)= 32/606808937109375*(175300359609375*mu10-175300359609375*mu9-...
      1262162589187500*mu8+752622877256250*mu7+3295677115696875*mu6-...
      932147724519375*mu5-3461965074863750*mu4+325018902708500*mu3+...
      1207456830780200*mu2-15887053800800*mu-62232495806976);
pk(3)= -16/13534477597265625*(1503830844140625*mu11+9022985064843750*mu10-...
      21234091519265625*mu9-72611636847750000*mu8+75423075736246875*mu7+...
      206899176302988750*mu6-92121024875457375*mu5-231649733618320500*mu4+...
      33985349193861900*mu3+84150967844732720*mu2-1745380633031680*mu-...
      4383123292263936);
pk(4)= 4/1078630192114083984375*(23969559824757421875*mu12+...
      910843273340782031250*mu11+2834571660419170546875*mu10-...
      10566299408869923468750*mu9-25909622100626060671875*mu8+...
      35887964750753480268750*mu7+79137040612084750535625*mu6-...
      43733604273459601520250*mu5-92386269609521562328500*mu4+...
      16396645075466968573800*mu3+34342647260492042398080*mu2-...
      853212034558607982720*mu-1799088744647124370432);
pk(5)= -16/17377930872949130859375*(231705744972655078125*mu12+...
      4876854251329216406250*mu11+10170288461080169296875*mu10-...
      53017769539768658625000*mu9-106444226965565076328125*mu8+...
      177140690998778122481250*mu7+343783600551103094353125*mu6-...
      215873551488077160142500*mu5-413244070126222800430000*mu4+...
      81500915704441763248000*mu3+155864868836947386703280*mu2-...
      4264973424387854694720*mu-8193885696679580794368);
pk(6)= 8/5851568792218905615234375*(238521089816161105078125*mu12+...
      3691338845856892699218750*mu11+5677757939133627612890625*mu10-...
      38997406035236306260968750*mu9-68331731303286464803453125*mu8+...
      129379642954164981434306250*mu7+230936439460862435440021875*mu6-...
      157768448748694823452481250*mu5-283604771839126729146697500*mu4+...
      59781815246733524887173000*mu3+108032956081063846702204160*mu2-...
      3137770834361392397203840*mu-5692411485439752304515072);
pk(7)= -16/16011591058063505445556640625*(401899407298694549384765625*mu12+...
      5119343441245174625859375000*mu11+6096679033655043876464296875*mu10-...
      53309040092803328529789843750*mu9-84575950164249230686890515625*mu8+...
      176289933318291004701936037500*mu7+296694844147505323466617978125*mu6-...
      215133911915833833172099053750*mu5-370327421550310626547949895000*mu4+...
      81695188040202192365704821000*mu3+142075917021247068424782157200*mu2-...
      4295544895954936909202548800*mu-7498052796424417824719297024);
pk(8)= 4/505348941646234768036300048828125*(54786006275730831181027212890625*mu12+...
      609574016198461966940321627343750*mu11+578305625271539528990539803515625*mu10-...
      6298082097892793729182288783406250*mu9-9262615792680537496049449624640625*mu8+...
      20796844276854162164331092615456250*mu7+33514798155867733032592215685531875*mu6-...
      25397789958845536937036983147092750*mu5-42365386023719238020514414484081500*mu4+...
      9658017749782079690976846869494200*mu3+16340284425709234292589707728591360*mu2-...
      508391589371910987239362859987840*mu-863337002910770448142093402672128);
%---------------------------------------------------------------------------------------
sumj=0; sumd=0;
for k=0:7
   sumj=sumj+pk(k+1)*eta^k;
   if k>0
     sumd=sumd+k*pk(k+1)*eta^(k-1);
   end
end   
alphaj(6)= sumj; 
alphad(6)= c2*sumd; 
for j=1:3 
  deltaj(2*j+1)= alphaj(2*j)+betad(2*j-1)+phi*betaj(2*j-1);
end
gammaj(1)= phi+zeta*betaj(1);
for j=1:2 
  gammaj(2*j+1)= phi*alphaj(2*j)+alphad(2*j)+zeta*betaj(2*j+1);
 end
Czeta= gammaj(1)+gammaj(3)/nu^2+gammaj(5)/nu^4;
Dzeta= 1+deltaj(3)/nu^2+deltaj(5)/nu^4+deltaj(7)/nu^6;
end 

function [xcer,num,ierr]=besjz(a,b,pnu)
%---------------------------------------------------------
%Calculation of the first num zeros of the Bessel function
%J_(pnu)(z)
%----------------------------------------------------------
ierr=0;
dpi=pi;
if (floor(pnu)==pnu)
  pnu=abs(pnu);
end
if (a<1.e-8) 
  a=1.e-8;
end
if (pnu>=0)
  a=max(max(pnu,a),2.4);
end
pnu2=pnu*pnu-0.25;
if (pnu2~=0) 
  j=floor(pnu2/abs(pnu2));
else
  j=1;
end 
dev=1;
if (j==1)
  xm=a;
  xc=b;
else
  xm=b;
  xc=a;
end
i=0;
omega2=1-(pnu*pnu-0.25)/xc/xc;
omegam=1-(pnu*pnu-0.25)/xm/xm;
if (j>0) 
  omegab=omega2;
else
  omegab=omegam;
end
ss=omega2*omegam;
if (ss<0) 
  k=0;
elseif (omegab<=0) 
  k=-1;
else
  k=1;
end
while ((j*(xc-xm)>0)&&(k>=0))
  iter=0;
  dev=eps+1;
  isal=0;
  h=1;
  while ((dev>eps)&&(j*(xc-xm)>0)&&(k>=0)&&(abs(h)/xc>1.e-15))
    if(iter>1000)
      disp('convergence failure');
      ierr=1;
    end
    ffc=fc(xc,pnu+1,eps);
    h=1/((pnu+0.5)/xc-ffc);
    omega=sqrt(omega2);
    atast=atan(omega*h);
    dest=atast/omega;
    dev=abs(dest)/xc;
    if (j*dest<0) 
      if(dev>1.e-10) 
        dest=dest+j*dpi/omega;
      end
    end
    if (isal>1) 
      dev=0.5*eps;
    end
    if (log(dev)<0.25*log(eps)) 
      isal=1;
    end
    xc=xc-dest;
    iter=iter+1;
    omega2=1-(pnu*pnu-0.25)/xc/xc;
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if (omega2<=0)
      k=-1;
    end
  end
  if ((j*(xc-xm)>0)&&(k>=0)) 
    i=i+1;
    xcer(i)=xc;
    ffc=fc(xc,pnu+1,eps);
    h=1/((pnu+0.5)/xc-ffc);
    xc=xc-j*dpi/omega;
    omega2=1-(pnu*pnu-0.25)/xc/xc; 
    if (omega2<=0) 
      k=-1;
    end
  end          
end        
if (k<0) 
  ffc=fc(xm,pnu+1,eps);
  hm=1/((pnu+0.5)/xm-ffc);
  ffc=fc(xc,pnu+1,eps);
  h=1/((pnu+0.5)/xc-ffc);
  if ((j*h>0)&&(h*hm<0))
    iter=0;
    dev=eps+1;
    omega=sqrt(-omega2);
    isal=0;
    while ((dev>eps)&&(abs(h*omega)<1)&&(j*(xc-xm)>0))
      iter=iter+1; 
      if(iter>1000)
        disp('convergence failure');
        ierr=1;
      end
      if (abs(h*omega)<1)
        atast=0.5*log((1+omega*h)/(1-omega*h));
        dest=atast/omega;
        dev=abs(dest)/xc;
        if (isal==1) 
          dev=0.5*eps;
        end
        if (log(dev)<0.25*log(eps)) 
          isal=1;
        end  
        xc=xc-dest;
        ffc=fc(xc,pnu+1,eps);
        omega2=1-(pnu*pnu-0.25)/xc/xc;
        h=1/((pnu+0.5)/xc-ffc);
        omega=sqrt(-omega2);
      end
    end  
    if (dev<eps) 
      i=i+1;
      xcer(i)=xc;
    end
  end        
end       
num=i;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
dev=eps+1;
if (abs(pnu+0.8774132)<0.01)&&(a<0.8)
   xc=0.721004;       
   while (dev>10*eps)
      ffc=fc(xc,pnu+1,eps);
      h=1/((pnu+0.5)/xc-ffc);
      xc=xc-h;
      dev=abs(h)/xc;
   end
   if (xc>a)
      if i>0
        if (abs(1-xc/xcer(i))>1.e-8)
          xcer(i+1)=xc;
          num=num+1;
        end
      else
        xcer(1)=xc;
      end
   end   
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%55
end
%-----------------------------------------
function [fct]=fc(xc,pnu,eps)
if pnu<0.5
  fct=besselj(pnu,xc)/besselj(pnu-1,xc);
else  
  tiny=1.e-290;
  tinysq=sqrt(tiny);          
  m=0;
  b=2*pnu/xc;
  a=1;
  fct=tinysq;
  c0=fct;
  d0=0;
  delta=0;
  while (abs(delta-1)>eps) 
    d0=b+a*d0;
    if (abs(d0)<tinysq) 
      d0=tinysq;
    end
    c0=b+a/c0;
    if(abs(c0)<tinysq) 
      c0=tinysq;
    end
    d0=1/d0;
    delta=c0*d0;
    fct=fct*delta;
    m=m+1;
    if (m>1e8)
      disp('convergence of the cf fails');
    end  
    a=-1;  
    b=2*(pnu+m)/xc;
  end
end 
end 

function xc=startnode(n,alpha)
xc=0;
xr=(2*n^2+n*(alpha-1)+2*(alpha+1)+2*(n-1)*sqrt(n^2+(n+2)*(alpha+1)))/(n+2);
prod=(alpha+1)/(n+2)*(n*(alpha+5)+2*(alpha-1));
xl=prod/xr;
zl=sqrt(xl);
zr=sqrt(xr);
if abs(alpha)>0.5  
    x=sqrt(alpha^2-0.25);
else
    x=xl;
end
z=sqrt(x);
L=2*n+alpha+1;
hph=start(n,alpha,x);
f0=1/hph;f1=1;
hf=1/hph;
w=sqrt((0.25-alpha^2+2*L*z^2-z^4)/z^2);
h=-atan(w*hf)/w;
if h<0
   h=h+pi/w;
end
z0=z;
z=z+h;
i=0;
j=-3;
errom=5.0e-12;
while j<0
   j=j+2;
   while z<zr && z>zl
      i=i+1;
      err=1;
      while err>errom && z<zr && z>zl
      if (j<0 && i>2)||j>0
         [y,yd]=sertay(n,alpha,z0,h,f0,f1);        
         f0=y;f1=yd;
         hf=y/yd;
      else
         hph=start(n,alpha,z^2);
         hf=1/hph;
         f0=1/hph;f1=1;
      end
         w2=(0.25-alpha^2+2*L*z^2-z^4)/z^2;
         if w2>0
            w=sqrt(w2);
            h=-atan(w*hf)/w;
         else
            w=sqrt(-w2);
            h=-atanh(w*hf)/w;
         end
         if i==n+1
           disp(h)
         end
         z0=z;
         z=z+h;
         err=abs(h/z);
      end
      if err<errom && z<zr && z>zl
        xc=z^2;
        if i>0
           return;   
        end   
      end
   end
end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Golub-Welsch
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [x,w]=LGW(N,alpha)
i=1:N-1;
a=sqrt(i.*(i+alpha));
b=2*i+alpha-1;
b(N)=2*N+alpha-1;
J=diag(a,-1)+diag(a,1)+diag(b,0);
[V,D]=eig(J);
x=diag(D)';
w=V(1,:).^2;
end

function [jax, jaxp, yax, yaxp, ierr]=bessJY(a, x)
     %--------------------------------------------------
     % Computation of the Bessel functions Ja(x), Ya(x)
     % and their derivatives for real positive orders (a) 
     % and arguments (x).
     %--------------------------------------------------
     % Inputs:
     %   a ,    order of the Bessel functions
     %   x,     argument of the Bessel functions.
     % Outputs:
     %   jax,     function Ja(x)
     %   jaxp,    first order derivative of Ja(x)
     %   yax,     function Ya(x)
     %   yaxp,    first order derivative of Ya(x)
     %---------------------------------------------------- 
     eps=1.e-15;
     aa=abs(a);
     lneps=-log(eps);
     ierr=0;
     if (x<0.0) || (a<0.0)
       % Argument out of range
       ierr=2;
       jax=0.0; yax=0.0;
       jaxp=0.0; yaxp=0.0;
     end
     xlim=(2.0*a)/exp(1.0)*xpowy(1e-200,1.0/a);
     if (x<xlim) 
       % Underflow/overflow problems
       ierr=1;
       jax=0.0; yax=0.0;
       jaxp=0.0; yaxp=0.0;
     end
     if (ierr==0) 
       if a>300.0
         alim=2.3*a;
       else
         alim=2.0*a;
       end
       if a>15.0          
         if (x>0.55*a)&&(x<alim)
           % Airy-type asymptotic expansion
           [jax, jaxp, yax, yaxp, ierr]=JYBesAiry(a, x); 
         else   
           if (x*x<4.0*(1.0 + aa))&&(x<11.0)
              % Power series
              ia=exp(a*(log(x/(2.0*a))+1.0))...
                  /(sqrt(2.0*pi*a)*gamstar(a)); 
              r=x*x/4.0;
              c=1.0;
              s=a;
              n=1;
              jax=0.0;
              jap=0.0;
              eps=1.e-15;
              while abs(s)>eps
                jax=jax+c;
                jap=jap+s;
                c=-c*r/(n*(a+n));
                s=(a+2.0*n)*c;
                n=n+1;
              end	
              jax=jax*ia;
              jap=jap*ia/x;
              jaxp=jap;
              [yax, yaxp]= bessyax(a, x); 
           elseif x>(a/5.3)^2+20.0  
              [jax, jaxp, yax, yaxp,ierr]= expax(a, x);
           elseif ((a>5.0+2.0*lneps*(0.4343+0.025*lneps)...
                 /(2.0-3.6*x/a))&&(x<a/2.0)) 
              [jax, jaxp, yax, yaxp]=deb1(a, x);
           elseif ((x>5.0+lneps*(0.4343+0.01*lneps)/...
                 (2.0-3.4*a/x))&&(alim<x)) 
              [jax, jaxp, yax, yaxp]=deb2(a, x);
           elseif (x<a)&&(a>120.0)
             [jax, jaxp, yax, yaxp]= deb1(a, x);
           else 
             [jax, jaxp]=jrec(a, x);
             [yax, yaxp]= bessyax(a, x);
           end
         end 
       else     
         if (x*x<4.0*(1.0 + aa))&&(x<11.0)
           ia=exp(a*(log(x/(2.0*a))+1.0))...
              /(sqrt(2.0*pi*a)*gamstar(a)); 
           r=x*x/4.0;
           c=1.0;
           s=a;
           n=1;
           jax=0.0;
           jap=0.0;
           eps=1.e-15;
           while (abs(s)>eps)
             jax=jax+c;
             jap=jap+s;
             c=-c*r/(n*(a+n));
             s=(a+2.0*n)*c;
             n=n+1;
           end			
           jax=jax*ia;
           jap=jap*ia/x;
           jaxp=jap;
           [yax, yaxp]= bessyax(a, x); 
         elseif (x>(a/5.3)^2+20.0)  
           [jax, jaxp, yax, yaxp,ierr]=expax(a, x); 
         elseif ((a>5.0+2.0*lneps*(0.4343+0.025*lneps)...
                 /(2.0-3.6*x/a))&&(x<a/2.0)) 
           [jax, jaxp, yax, yaxp]=deb1(a, x);
         elseif ((x>5.0+lneps*(0.4343+0.01*lneps)/...
                 (2.0-3.4*a/x))&&(alim<x)) 
           [jax, jaxp, yax, yaxp]= deb2(a, x);
         else
           if (x<a)&&(a>120.0)
             [jax, jaxp, yax, yaxp]= deb1(a, x); 
           else
             [jax, jaxp]= jrec(a, x);
             [yax, yaxp]= bessyax(a, x);
           end
         end    
       end
     end
     end 

     function   [jax, jap]= bessjax(a, x)
     % Output: Ja(x) and derivative
     eps=1.e-15;
     aa=abs(a);
     lneps=-log(eps);
     if (a<-0.5) 
       [ia, iad]= bessjax(-a, x);
       [yax, yap]= bessyax(-a, x);
       s=sin(a*pi);
       c=cos(a*pi);
       jax=c*ia+s*yax;
       jap=c*iad+s*yap;
     elseif (aa==0.5) 
       s=sin(x);
       c=cos(x);
       r=sqrt(2.0/(pi*x));
       if (a<0) 
         jax=c*r;
         jap=a*jax/x-r*s;
       else
         jax=r*s;
         jap=r*c-a*jax/x;
       end  
     elseif ((x*x<4.0*(1.0 + aa))) 
       ia=exp(a*(log(x/(2.0*a))+1.0))...
          /(sqrt(2.0*pi*a)*gamstar(a)); 
       r=x*x/4.0;
       c=1.0;
       s=a;
       n=1;
       jax=0.0;
       jap=0.0;
       while (abs(s)>eps)
         jax=jax+c;
         jap=jap+s;
         c=-c*r/(n*(a+n));
         s=(a+2.0*n)*c;
         n=n+1;
       end				
       jax=jax*ia;
       jap=jap*ia/x;    
     elseif (a>5.0+2.0*lneps*(0.4343+0.025*lneps)/(2.0-3.6*x/a))&&(x<a/2.0) 
       [jax, jap, ia, iad]= deb1(a, x);
     elseif (x>5.0+lneps*(0.4343+0.01*lneps)/(2.0-3.4*a/x))&&(a<x/2.0) 
       [jax, jap, ia, iad]= deb2(a, x);
     else
       [jax, jap]= jrec(a, x);
     end
     end 

     function  [yax, yap]=bessyax(a, x)
     eps=1.e-15;
     if (a <-0.5) 	  
       [f,g]=bessjax(-a, x);
       [p,q]=bessyax(-a, x);
       c=cos(a*pi);
       s=sin(a*pi);
       yax=-s*f+c*p;
       yap=-s*g+c*q;
     elseif (abs(a)==0.5) 
       s=sin(x);
       c=cos(x);
       t=sqrt(2.0/(pi*x));
       if (a < 0) 
         yax=s*t;
         yap=a*yax/x+t*c;		
       else
         yax=-c*t;
         yap=s*t-a*yax/x;
       end
     else
       na=floor(a+0.5);
       r=a-na;
       if (x<11.5) 
         b=x/2.0;
         d=-log(b);
         e=r*d;
         c=r*pi;
         if (abs(c)<1.0e-5) 
           c=1.0 + c*c/6.0;
         else
           c=c/sin(c);
         end   
         c=c/pi;
         if (abs(e)<1.0e-5) 
	         q=e*e;
           s=1.0+q/6.0;
           q=1.0+q/2.0;
         else
	       [p,q]= hypfun(e);
           s=p/e;
         end
         e=exp(e);
         [gg,p,t]=recipgam(-r);
         g=e*gg;
         e=r*r;
         f=2.0*c*(-p*q+(1.0+e*t)*s*d);
         p=g*c;
         q=1.0/(g*pi);
         t=r*pi/2.0;
         if (abs(t)<1.0e-5) 
           s=1.0-t*t/6.0;
         else
           s=sin(t)/t;
         end   
         s=pi*t*s*s;
         c=1.0;
         d=-b*b;
         yax=f+s*q;
         ya1=p;
         n=1;
         h=ya1;
         g=yax;
         while ((abs(h/ya1)+ abs(g/yax))> eps)
           f=(f*n+p+q)/(n*n-e);
           c=c*d/n;
           p=p/(n-r);
           q=q/(n+r);
           g=c*(f+s*q);
           h=c*p-n* g;
           yax=yax+g;
           ya1=ya1+h;
           n=n+1;
         end   
         f=-yax;
         g=-ya1/b;
       else
         b=x-pi*(r+0.5)/2.0;
         c=cos(b);
         s=sin(b);
         d=sqrt(2.0/(pi*x));
         [p, q, b, h]= besspqax(r, x);
         f=d*(p*s+q*c);
         g=d*(b*c-h*s);
         g=r*f/x-g;
       end
       b=2.0/x;
       for n=1:na				
         h=b*(r+n)*g-f;
         f=g;
         g=h;
       end
       yax=f;
       yap=a*f/x-g;
     end 
     end 

     function [pa, qa, ra, sa]= besspqax(a, x)  
     eps=1.e-15;
     r=abs(a);
     na=floor(a);
     r=r-na;
     if (r==0.5) 
       pa=1.0;
       pa1=1.0;
       qa=0.0;
       qa1=1.0/x;
     elseif (x >= 5) 
       c=0.25-r*r;
       b=x+x;
       f=1.0;
       g=1.0;
       p=1.0;
       q=0.0;
       n=startpqbes(x, eps);
       while (n > 0)
         t=(n+1.0)*(2.0-p)-2.0;
         s=b+(n+1)*q;
         d=(n-1.0+c/n)/(s*s+t*t);
         p=d*t;
         q=d*s;
         e=f;
         f=p*(e+1.0)-g*q;
         g=q*(e+1.0)+g*p;
         n=n-1.0;
       end   
       f=1.0+f;
       d=f*f+g*g;
       pa=f/d;
       qa=-g/d;
       d=r+0.5-p;
       q=q+x;
       pa1=(pa*q-qa*d)/x;
       qa1=(qa*q+pa*d)/x;
     else 
       e=sqrt(pi*x/2.0);
       t=x-pi*(r/2.0+0.25);
       c=cos(t);
       s=sin(t);
       [p,q]= bessyax(r, x);
       [f,g]= bessjax(r, x);
       d=r/x;
       q=d*p-q;
       g=d*f-g;
       pa=e*(s*p+c*f);
       qa=e*(c*p-s*f);
       pa1=e*(s*g-c*q);
       qa1=e*(c*g+s*q);
     end    
     t=2.0/x;
     b=(r+1.0)*t;
     for n=1:na 
       c=pa-qa1*b;
       s=qa+pa1*b;
       pa=pa1;
       pa1=c;
       qa=qa1;
       qa1=s;
       b=b+t;
     end
     ra=abs(a)*qa/x+pa1;
     sa=-abs(a)*pa/x+qa1;
     end  

     function [jax,jap,yax,yap]=deb1(a,x)
     % Debye-type expansion a > x
     eps=1.e-15;
     y=x/a;
     t2=1.0/(1.0-y*y);
     t=sqrt(t2);
     eta=log((1.0+t)/(t*y))-1.0/t;
     c1=1.0;
     c2=0.0;
     c3=0.0;
     u=t/(8.0*a);
     w=4.0*u;
     z=sqrt(t/(2.0*pi*a));
     zz=z/(y*t);
     k=1;
     m=1;
     n=-3;
     jax=1.0;
     jap=1.0;
     sig=1;
     yax=1.0;
     yap=1.0;
     jj=0;
     jjj=0;
     while (jj~=30)&&(jjj~=400)
       v=m*c1-n*c3*t2;
       ck=m*u*v/k;
       if (abs(c3)<abs(ck)) 
         jj=jj+10;
       else
         jj=0;
       end
       if (abs(ck)<eps) 
         jjj=jjj+100;
       else
         jjj=0;
         c3=c2;
         c2=c1;
         c1=ck;
         k=k+1;
         m=m+2;
         n=n+2;
         sig=-sig;
         v=ck-w*v;
         jax=jax+ck;
         jap=jap+v;
         yax=yax+sig*ck;
         yap=yap+sig*v;
       end
     end
     v=exp(a*eta);
     jax=z*jax/v;
     yax=-2.0*z*yax*v;
     jap=zz*jap/v;
     yap=2.0*zz*yap*v;
     end

     function [jax,jap,yax,yap]=deb2(a,x)
     % Debye-type expansion x > a
     eps=1.e-15;
     a2=a*a;
     x2=x*x;
     w2= a2/(x2-a2);
     ww=sqrt(x2-a2);
     chi=ww+a*(atan(a/ww)-pi/2.0)-pi/4.0;
     c=sqrt(2.0/pi);
     k2=sqrt(ww);
     k1=c/k2;
     k2=c*k2/x;
     e1= 1.0;
     e2=0.0;
     e3=0.0;
     jj=0;
     jjj=0;
     u=1.0/(8.0*ww);
     w=4.0*u;
     k=1;
     m=1;
     n=-3;
     p=1.0;
     q=0.0;
     r=1;
     s=0;
     sig=1;
     t=1.0;
     while (jj~=30)&&(jjj~=400)
       v=n*e3*w2-m*e1;
       ek=m*u*v/k;
       if abs(e3)< abs(ek) 
         jj=jj+10;
       else
         jj=0;
       end   
       if abs(ek)<eps 
         jjj=jjj+100;
       else
         jjj=0;
       end   
       e3=e2;
       e2=e1;
       e1=ek;
       fk=ek-w*v;
       if (sig==1) 
         q=q+t*ek;
         s=s+t*fk;
         t=-t;
       else
         p=p+t*ek;
         r=r+t*fk;
       end
       k=k+1;
       m=m+2;
       n=n+2;
       sig=-sig;
     end   
     c=cos(chi);
     u=sin(chi);
     jax=k1*(p*c-q*u);
     yax=k1*(p*u+q*c);
     jap=-k2*(r*u+s*c);
     yap=k2*(r*c-s*u);
     end  	

     function [jax,jap,yax,yap,ierr]=expax(a,x)
     % Asymptotic expansions, x large
     ierr=0;
     piquart=0.78539816339744830962;
     pihalf=1.5707963267948966192;
     giant=1e+305;
     m=0;
     w=x-a*pihalf-piquart;
     x2=x*x;
     cosw=cos(w);
     sinw=sin(w);
     fact=sqrt(1.0/(pihalf*x));
     fnus=4.0*a*a;
     err1=1.0; 
     err1p=1.0;
     y1=0.0; 
     y1p=0.0;
     k=0;
     a2=1.0;
     x2k=1.0;
     x2kp=x;
     while ((err1 > eps)||(err1p >eps))&&(m<500)
       acof=a2/x2k;
       k=k+1;
       l=2*k;
       a2=(fnus-(l-1.0)*(l-1.0))*a2/(8.0*k);   
       acofd=a2/x2kp;
       k=k+1;
       l=2*k;
       a2=(fnus-(l-1.0)*(l-1.0))*a2/(8.0*k);
       x2k=-x2*x2k;
       x2kp=-x2*x2kp;
       y1=y1+acof; 
       y1p=y1p+acofd;    
       err1=abs(acof/y1); 
       err1p=abs(acofd/y1p);
       if (abs(a2)>giant) 
         m=500;
       end
     end     
     if (m==500) 
       ierr=1;
       jax=0.0; yax=0.0;
       jap=0.0; yap=0.0;
     else
       jax=fact*(cosw*y1-sinw*y1p);
       yax=fact*(sinw*y1+cosw*y1p);
     end
     if (ierr==0) 
       err1=1.0; 
       err1p=1.0;
       y1=1.0; 
       a2=(fnus+3.0)/8.0;
       x2k=1.0;
       x2kp=x;
       y1p=a2/x2kp;
       a2=(fnus-1.0)*(fnus+15.0)/128.0;
       x2k=-x2*x2k;
       x2kp=-x2*x2kp;
       k=2;
       while ((err1 > eps)||(err1p >eps))&&(m<500)
         acof=a2/x2k;
         k=k+1;
         l=2*k;
         a2=(fnus-(l-3.0)*(l-3.0))*a2*(fnus+4*k*k-1.0)...
              /((8.0*k)*(fnus+4*(k-1)*(k-1)-1.0));
         acofd=a2/x2kp;
         k=k+1;
         l=2*k;
         a2=(fnus-(l-3.0)*(l-3.0))*a2*(fnus+4*k*k-1.0)...
              /((8.0*k)*(fnus+4*(k-1)*(k-1)-1.0));
         x2k=-x2*x2k;
         x2kp=-x2*x2kp;
         y1=y1+acof; 
         y1p=y1p+acofd;    
         err1=abs(acof/y1); 
         err1p=abs(acofd/y1p);
         if abs(a2)>giant 
           m=500;
         end
       end
       if m==500 
         ierr=1;
         jax=0.0; yax=0.0;
         jap=0.0; yap=0.0;
       else
         jap=-fact*(sinw*y1+cosw*y1p);
         yap=fact*(cosw*y1-sinw*y1p);
       end
     end   
     end 

     function [jax, jap]=jrec(a, x)
     %Miller, with the standard recurrence relation
     eps=1.e-15;
     if x <= 0 
       if a == 0.0 
         jax=1.0;					
       else
         jax=0.0;
       end					
       jap=0.0;	
     else
     % Function startijbes
       na=floor(a); 
       nu=startijbes(x,na+1,0,eps);
       nu2=nu+nu;
       x2=2.0/x;
       k=1;
       ap=a+1.0;
       am=a-1.0;
       % Logical variable
       notsimple=(a~=0.0)&&(a~=1.0);
       if a==0.0 
         la=2;
       elseif a==1.0 
         la=1;
       else
         g1=gamstar(nu+a);
         g2=gamstar(nu*1.0);
         g3=gamstar(a);
         la=g1*exp(a*log(1.0+nu/a)+nu*log(1.0+a/nu))...
           /(g2*g3*sqrt(2*pi*(nu+a)*nu*a));
       end
       j2=0.0;
       j1=1.0;
       n= nu2;
       m= nu; 
       s=0.0;
       while (n>0)
         j0=-j2+x2*(ap+n)*j1;
         if k==1 
	         if a==0.0 
             s=s+2*j0;
           else
             s=s+la*(a+n)*j0;
           end
	         if m>1 
	           if (notsimple) 
	             la=la*m/(m+am);
             end 
           end
           m=m-1;
         end
         j2=j1;
         j1=j0;
         k=-k;
         n=n-1;
       end
       j0=-j2+x2*ap*j1;
       s=s+j0;
       if a==0.0 
         s=1.0/s;
       elseif a==1.0 
         s=1.0/(s*x2);
       else   
         s=exp(a*(1.0-log(a*x2)))/(s*g3*sqrt(2.0*pi*a));
       end
       jax=s*j0;
       jap=s*(a/x*j0-j1);
     end		
     end 

     function st=startpqbes(x,epss)
     mactol=eps;
     if (epss<mactol) 
       del=-log(mactol/2.0);
     else
       del=-log(epss/2.0);
     end
     t=del/(2.0*x);
     if (t<0.5) 
       s=1.0/(2.0*t);
       c=sqrt(1.0+s*s);
       a=log(s+c)+s*c/(1.0+c*c);
       a=a*(1.0+7.16*t)/(1.0+5.33*t);
     else
       q=1.0/t*t;
       a=(1.0+q*q*(-7.0/360.0+4.1e-3*q))/t;
     end
     b=0.0;
     while (abs(b/a-1.0)>1.0e-2)
       b=a;
       [s,c]= hypfun(a);
       a=a+(a*c*s+s*s*(1.0-2.0*t*s))/(a*(1.0+c*c));
     end  
     [s,c]= hypfun(a);
     st=1.0+floor(x*c/s*s);
     end 

     function [s, kmax]=phizeta(zeta)
     phik(1)=1.2599210498948731648;
     phik(2)=.20000000000000000000;
     phik(3)=0.20409442096733993248e-1;
     phik(4)=-0.35597769346236098942e-2;
     phik(5)=-0.19683982683982683983e-2;
     phik(6)=-0.20673367061132873279e-3;
     phik(7)=0.11681173009598189462e-3;
     phik(8)=0.53095696007340665204e-4;
     phik(9)=0.42673899863261117719e-5;
     phik(10)=-0.41528636693801060913e-5;
     phik(11)=-0.17568372831164108478e-5;
     phik(12)=-0.11402786896104923682e-6;
     phik(13)=0.15533576025831417179e-6;
     phik(14)=0.63395269099583076477e-7;
     phik(15)= 0.34894701838555374020e-8;
     phik(16)=-0.60044875533414815786e-8;
     phik(17)=-0.23993332052814288615e-8;
     phik(18)=-0.11582676745605076908e-9;
     phik(19)=0.23754898857892364962e-9;
     phik(20)=0.93607463563942867781e-10;
     phik(21)=0.40542001500194274074e-11;
     phik(22)=-0.95614572050793794738e-11;
     phik(23)= -0.37301511168150182683e-11;
     phik(24)= -0.14727062811805787322e-12;
     phik(25)= 0.39000756737548022749e-12;
     s= phik(1); 
     t=s;  
     zetak= 1.0; 
     k= 1;
     while ((abs(t) > 1.0e-16)&&(k < 25))
       zetak= zeta*zetak;
       t=phik(k+1)*zetak;
       s=s+t;
       k= k+1;
     end
     kmax= k;
     end 

     function chiz=chizeta(zeta)
     chik(1)=.15874010519681994748;
     chik(2)= 0.71995488565421323703e-2;
     chik(3)= -0.12190476190476190476e-1;
     chik(4)= -0.39822790851437230115e-2;
     chik(5)= 0.27754184922651308731e-3;
     chik(6)= 0.57958491395226089104e-3;
     chik(7)= 0.15466235789565560764e-3;
     chik(8)= -0.21638396018033400537e-4;
     chik(9)= -0.27028766531753854913e-4;
     chik(10)= -0.65331520523895438118e-5;
     chik(11)= 0.11834212951681698844e-5;
     chik(12)= 0.12449403861697797972e-5;
     chik(13)= 0.28434185951562648920e-6;
     chik(14)= -0.58918145279531299099e-7;
     chik(15)= -0.56913494700904364692e-7;
     chik(16)= -0.12536139854637631961e-7;
     chik(17)= 0.28216007891494136557e-8;
     chik(18)= 0.25901270610604348767e-8;
     chik(19)= 0.55628394372865850242e-9;
     chik(20)= -0.13250218032852282737e-9;
     chik(21)= -0.11754702052918243107e-9;
     chik(22)= -0.24776231260359780515e-10;
     chik(23)= 0.61525731123646300928e-11;
     chik(24)= 0.53249498993041565381e-11;
     chik(25)= 0.11060987152463791205e-11;
     s= chik(1); 
     t= s;  
     zetak= 1.0; 
     k= 1;
     while (abs(t) > 1.0e-16)&&(k < 25)
       zetak= zeta*zetak; 
       t= chik(k+1)*zetak;  
       s= s + t;  
       k= k+1;
     end
     chiz=s;
     end 

     function zeta=zetaz(z)
     twothird=0.6666666666666666666667;
     twoexp13=1.25992104989487316476721060728;
     zetak(1)=-1.0;
     zetak(2)=0.3;
     zetak(3)=-0.182857142857142857142857142857;
     zetak(4)=0.131682539682539682539682539683;
     zetak(5)=-0.102636487322201607915893630179;
     zetak(6)=0.0840417027417027417027417027417;
     zetak(7)=-0.0709607816028768409720790673172;
     zetak(8)=0.0611325306917572223694672674265;
     zetak(9)=-0.0533701347889438816199130714547;
     zetak(10)=0.0469919788555835658740312665375;
     zetak(11)=-0.0415806453450275544520787454077;
     zetak(12)=0.0368672753779680636097084350267;
     zetak(13)=-0.0326717513334618341955351074614;
     zetak(14)=0.0288696438349622209737935735201;
     zetak(15)=-0.0253729385600982588211253000563;
     zetak(16)=0.0221182862894696069441279175389;
     zetak(17)=-0.0190595626009876389331767879833;
     zetak(18)=0.0161629994691626861897781420917;
     zetak(19)=-0.0134039065323106692770387708064;
     zetak(20)=0.0107644051661864058879958722483;
     zetak(21)=-0.00823182508269234831534366561927;
     zetak(22)=0.00579754441493412939502240278547;
     zetak(23)=-0.00345613270412384967447374617551;
     zetak(24)=0.00120470443781096787386723520378;
     w=z-1.0;
     if z==1.0 
       zeta=0.0; 
     elseif abs(w)<0.01 
       s=0.0; 
       t=1.0; 
       d=1.0;  
       wk=1.0; 
       k= 1;
       while (abs(t)>1.0e-16)&&(k < 25) 
         wk=w*wk;
         t=zetak(k)*wk;
         s=s+t;
         k=k+1;
       end
       zeta=twoexp13*s;
     elseif (z<1.0)  
       w=sqrt((1.0-z)*(1.0+z)); 
       zeta=xpowy(1.5*(log((1.0+w)/z)-w),twothird);
     else
       w=sqrt((z-1.0)*(z+1.0)); 
       zeta=-xpowy(1.5*(w-acos(1.0/z)),twothird);
     end
     end 

     function [jax, jaxp, yax, yaxp, ierr]=JYBesAiry(a,x)
     % Airy-type expansion for Bessel
     dwarf=1e-305;
     ierr=0;
     z=x/a;
     zeta=zetaz(z);
     a13=a^(1.0/3.0);
     a23= a13*a13; 
     a43=a*a13;
     w=a23*zeta;
     wlim=(-1.5*log(dwarf))^(2.0/3.0);
     if w>wlim 
       % Under/overflow problems
       ierr=1;
       jax=0.0;
       jaxp=0.0;
       yax=0.0; 
       yaxp=0.0; 
     else
       [phiz, kmax]=phizeta(zeta);
       chi=chizeta(zeta);
       if (kmax<5) 
         kmax= 5; 
       end
       [sf,sg,sfp,sgp]=recur(a,zeta,kmax);
       w= 1.0/(a*a);
       az=sf; bz=sg;
       cz=chi*sf+sfp+zeta*sg;
       dz=sf+w*(chi*sg+sgp);
       w=a23*zeta;
       [ai,bi]= aibi(w);
       [aip,bip]= aibip(w);
       %Now compute the output Bessel functions J, Y and derivatives
       jax=phiz/a13*(ai*az+aip*bz/a43);
       yax=-phiz/a13*(bi*az+bip*bz/a43);
       phih= 2.0/(z*phiz);
       jaxp=-phih*(ai*cz/a43+aip*dz/a23);
       yaxp=phih*(bi*cz/a43+bip*dz/a23);
     end
     end 

     function [sf,sg,sfp,sgp]=recur(nu,zeta,kmax)
     twoexp13=1.25992104989487316476721060728;
     psik(1)= 0.17998872141355330925e-1;
     psik(2)= 0.26666666666666666667e-1;
     psik(3)= 0.81284358134178674405e-2;
     psik(4)= -0.25499940565393672258e-2;
     psik(5)= -0.27185440409930205849e-2;
     psik(6)= -0.64287929800235579817e-3;
     psik(7)= 0.21800832196221116516e-3;
     psik(8)= 0.19524603774687808301e-3;
     psik(9)= 0.41595772741004484377e-4;
     psik(10)= -0.14680083795856540042e-4;
     psik(11)= -0.12159606341232918219e-4;
     psik(12)= -0.24579927092988893928e-5;
     psik(13)= 0.88115019306698039283e-6;
     psik(14)= 0.70074891930340538162e-6;
     psik(15)= 0.13746831574149545326e-6;
     psik(16)= -0.49561583422955524129e-7;
     psik(17)= -0.38479724126131225767e-7;
     psik(18)= -0.74072962899962262038e-8;
     psik(19)= 0.26753958521879461353e-8;
     psik(20)= 0.20450384057905768059e-8;
     psik(21)= 0.38862478591128364861e-9;
     psik(22)= -0.14040517140485884664e-9;
     psik(23)= -0.10616024263813946569e-9;
     psik(24)= -0.19986725826057819121e-10;
     psik(25)= 0.72186876857324009442e-11; 
     c=twoexp13;
     for k=0:kmax+2  
       f1(k+1)= 0; 
       g1(k+1)=psik(k+1)/(2.0*k+1.0); 
     end
     mu=2.0*nu*nu;
     s=2.0/mu;
     f1(1)=1.0+s*(-1.0/225.0+s*(6.93735541e-4...
          -s*3.5421197e-4));
     g1(1)=c*(1.0/70.0+s*(-1213.0/1023750.0...
          +s*(4.3829180944898811e-4-s*(3.7670439477105e-4+...
          s*5.84533e-4))));
     for iter=1:3 
       for k=0:kmax 
         p=0; q=0;
         for j=0:k 
           p=p + f1(j)*psik(k-j); 
           q=q + g1(j)*psik(k-j);
         end
         f0(k+1)= p; g0(k+1)= q;
       end
       for k=kmax-1:-1:1 
         f1(k+1)=(g0(k-1)/k-(k+1)*g1(k+2))/mu;
         g1(k)=(f0(k)-k*(k+1)*f1(k+2))/...
                 (2.0*k-1.0);
       end
     end 
     sf=f1(1);sg=g1(1);      
     sfp=0.0;sgp=0.0;  
     zetk=1.0; p=1.0; q=1.0; k= 1;
     while ((k<kmax)&&(abs(p)+abs(q)>1.0e-16)) 
       p=f1(k+1)*zetk;
       q=g1(k+1)*zetk;
       sfp=sfp+k*p;
       sgp=sgp+k*q;
       zetk=zeta*zetk;
       sf=sf+p*zeta; 
       sg=sg+q*zeta;  
       k= k+1;
     end
     end 
     function [sih,coh]=hypfun(x)   
     ax=abs(x);
     if ax<0.21 
       if ax<0.07 
	       y=x*x;
       else
	       y=x*x/9.0;
       end
       f=2.0+y*(y*28+2520.0)/(y*(y+420)+15120.0);
       f2=f*f;
       sih=2*x*f/(f2-y);
       coh=(f2+ y)/(f2-y);
       if (ax>=0.07) 
         ss=2.0*sih/3.0;
	       f=ss*ss;
	       sih=sih*(1.0+f/3.0);
	       coh=coh*(1.0+f);
       end
     else
       y=exp(x);
       f=1.0/y;
       coh=(y+f)/2.0;
       sih=(y-f)/2.0;
     end
     end   
     function z=xpowy(x,y)
     z=x^y;
     end
     function [g] = gamstar(x)
     giant=realmax/1000;
     if (x>=3.0)
       g = exp(stirling(x));
     elseif (x>0.0)
       g = gamma(x)/(exp(-x+(x-0.5)*log(x))*sqrt(2*pi));
     else
       g = giant;
     end
     end

     %% Stirling
     function [s] =  stirling(x)
     %Stirling series, function corresponding with asymptotic series for log(gamma(x))
     % that is:  1/(12x)-1/(360x**3)...; x>= 3
     dwarf=realmin*1000.0;
     giant=realmax/1000;
     lnsqrttwopi=0.9189385332046727418;
     if (x<dwarf)
       s =giant;
     elseif (x<1.0)
       ln1=log(gamma(1+x));
       s = ln1-(x+0.5)*log(x)+x-lnsqrttwopi;
     elseif (x<2.0)
       ln1=log(gamma(x));
       s =ln1-(x-0.5)*log(x)+x-lnsqrttwopi;
     elseif (x<3.0)
       ln1=log(gamma(-1+x));
       s =ln1-(x-0.5)*log(x)+x-lnsqrttwopi+log(x-1);
     elseif (x<12.0)
       a=[1.996379051590076518221;
        -0.17971032528832887213e-2;
        0.131292857963846713e-4;
        -0.2340875228178749e-6;
        0.72291210671127e-8;
        -0.3280997607821e-9;
        0.198750709010e-10;
        -0.15092141830e-11;
        0.1375340084e-12;
        -0.145728923e-13;
        0.17532367e-14;
        -0.2351465e-15;
        0.346551e-16;
        -0.55471e-17;
        0.9548e-18;
        -0.1748e-18;
        0.332e-19;
        -0.58e-20];
       z=18.0/(x*x)-1.0;
       s=chepolsum(17,z,a)/(12.0*x);
     else
       z=1.0/(x*x);
       if (x<1000.0)
         c=[0.25721014990011306473e-1;
            0.82475966166999631057e-1;
            -0.25328157302663562668e-2;
            0.60992926669463371e-3;
            -0.33543297638406e-3;
            0.250505279903e-3;
            0.30865217988013567769];
         s =((((((c(6)*z+c(5))*z+c(4))*z+c(3))*z+c(2))*z+c(1))/(c(7)+z)/x);
       else
         s =(((-z*0.000595238095238095238095238095238+...
            0.000793650793650793650793650793651)*z...
            -0.00277777777777777777777777777778)*z+...
            0.0833333333333333333333333333333)/x;
       end
     end
     end
     %% Function chepolsum
     function [chep]=chepolsum(n,t,ak)
     u0=0; u1=0; k=n; tt=t+t;
     while k>=0
       u2=u1; 
       u1=u0; 
       u0=tt*u1-u2+ak(k+1); 
       k= k-1; 
     end
     s=(u0-u2)/2.0;
     chep=s;
     end
     function [recip,q,r]=recipgam(x)	
    %recipgam(x)=1/gamma(x+1)=1 + x * (q + x * r); -0.5<=x<=0.5
     if (x==0)
       q=0.5772156649015328606;
       r=-0.6558780715202538811;
     else
       c(1)=+1.142022680371167841;
       c(2)=-6.5165112670736881e-3;
       c(3)=-3.087090173085368e-4;
       c(4)=+3.4706269649043e-6;
       c(5)=-6.9437664487e-9;
       c(6)=-3.67795399e-11;
       c(7)=+1.356395e-13;
       c(8)=+3.68e-17;
       c(9)=-5.5e-19;
       tx=2.0*x;
       t=2*tx*tx-1;
       q=chepolsum(8,t,c);
       c(1)=-1.270583625778727532;
       c(2)=+2.05083241859700357e-2;
       c(3)=-7.84761097993185e-5;
       c(4)=-5.377798984020e-7;
       c(5)=+3.8823289907e-9;
       c(6)=-2.6758703e-12;
       c(7)=-2.39860e-14;
       c(8)=+3.80e-17;
       c(9)=+4e-20;
       r=chepolsum(8,t,c);
     end			
     recip=1+x*(q+x*r);
     end   
     function s=startijbes(x,n,t,eps)
     machtol=eps;
     if x<=0.0 
       s=0;
     else
       s=2*t-1;
       if (eps<machtol) 
         del=-log(machtol/2.0);
       else
         del=-log(eps/2.0);
       end
       p=del/x-t;
       r=n/x;
       if (r>1.0)||(t==1) 
         q=sqrt(r*r+s);
         r=r*log(q+r)-q;
       else
         r=0;
       end
       q=del/(2.0*x)+r;
       if (p>q)
         r=p;
       else
         r=q;
       end
       y=alfinv(t,r);
       [p,q]=hypfun(y);
       if (t==0) 
         s=floor(x*q)+1;
       else
         s=floor(x*p)+1;
       end
       if (mod(s,2)>0) 
         s=s+1;
       end
    end
    end
    function alf=alfinv(t,r)
    if ((t+r)<2.7) 
      if (t==0) 
        a=exp(log(3.0*r)/3.0);
        a2=a*a;
        b=a*(1.0+a2*(-1.0/30.0+0.004312*a2));
      else
        a=sqrt(2.0*(1.0+r));
        a2=a*a;
        b=a/(1.0+a2/8.0);
      end
    else
      a=log(0.7357589*(r+t));
      lna=log(a)/a;
      b=1.0+a+log(a)*(1.0/a-1.0)+0.5*lna*lna;
    end
    while (abs(a/b-1.0)>1.0e-2)      
      a=b;
      b=fi(a,r,t); 
    end
    alf=b;
    end

     function [falf,df]=falfa(al,r,t) 
     [sh,ch]=hypfun(al);
     if (t==1) 
       falf=al*sh/ch-1.0-r/ch;
       df=(sh+(al+r*sh)/ch)/ch;
     else
       falf=al-(sh+r)/ch;
       df=sh*(r+sh)/(ch*ch);
     end
     end

     function fii=fi(al,r,t)
     [p,q]=falfa(al,r,t);
     fii=al-p/q;
     end



